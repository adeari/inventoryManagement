/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.EventObject;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.swing.BorderFactory;
import javax.swing.ButtonModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.plaf.InternalFrameUI;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;

/**
 *
 * @author ade
 */
public class formMenu extends javax.swing.JFrame {

    /**
     * Creates new form formMenu
     */
    public int userID;
    public int role_id;

    public formMenu() {
        initComponents();
        settingInternalFrame(userFrame.getUI());
        settingInternalFrame(userEditFrame.getUI());
        settingInternalFrame(projectFrame.getUI());
        settingInternalFrame(productsFrame.getUI());
        settingInternalFrame(productEditFrame.getUI());
        settingInternalFrame(projectDetailFrame.getUI());
        settingInternalFrame(financeFrame.getUI());
        settingInternalFrame(accountsFrame.getUI());
        settingInternalFrame(transactionsFrame.getUI());
    }

    void settingInternalFrame(InternalFrameUI ui) {
        if (ui instanceof BasicInternalFrameUI) {
            BasicInternalFrameUI bui = (BasicInternalFrameUI) ui;
            JComponent comp = bui.getNorthPane();
            comp.setPreferredSize(new Dimension(comp.getWidth(), 0));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooserDialog1 = new datechooser.beans.DateChooserDialog();
        dateChooserDialog2 = new datechooser.beans.DateChooserDialog();
        menuPop = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        ProductPopMenu = new javax.swing.JPopupMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        panelMenu1 = new panelLayout.panelMenu();
        jButton1 = new javax.swing.JButton();
        btLeftRoles = new javax.swing.JButton();
        btLeftRoles.setVisible(false);
        jButton3 = new javax.swing.JButton();
        lbFirstname = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        btLeftUSer = new javax.swing.JButton();
        btLeftUSer.setVisible(false);
        jDesktopPane1 = new javax.swing.JDesktopPane();
        userFrame = new javax.swing.JInternalFrame();
        userFrame.getContentPane().setBackground(Color.WHITE);
        jLabel1 = new javax.swing.JLabel();
        lbCountUser = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        filterSearch = new javax.swing.JComboBox();
        txSearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        final String columnUser[] = {"id", "NAME", "ROLE", "EMAL", "COMPANY NAME", "ACTION"};
        tmTabelUser = new javax.swing.table.AbstractTableModel() {
            public int getColumnCount() {
                return columnUser.length;
            }

            public int getRowCount() {
                return vectorUser.size();
            }

            public Object getValueAt(int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorUser.elementAt(row1);
                return rowTMP.elementAt(column1);
            }

            public String getColumnName(int column1) {
                return columnUser[column1];
            }

            public boolean isCellEditable(int row1, int column1) {
                if (column1 == 5) {
                    return true;
                } else {
                    return false;
                }
            }

            public void setValueAt(Object obj, int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorUser.elementAt(row1);
                rowTMP.setElementAt(obj, column1);
            }

            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        };
        tbUser = new javax.swing.JTable(tmTabelUser);
        tbUser.setAutoResizeMode(tbUser.AUTO_RESIZE_OFF);
        tc=tbUser.getColumn("id");
        tc.setMinWidth(0);
        tc.setWidth(0);
        tc.setMaxWidth(0);
        tc=tbUser.getColumn("NAME");
        tc.setMinWidth(215);
        tc=tbUser.getColumn("ROLE");
        tc.setMinWidth(117);
        tc=tbUser.getColumn("EMAL");
        tc.setMinWidth(210);
        tc=tbUser.getColumn("COMPANY NAME");
        tc.setMinWidth(210);
        tc=tbUser.getColumn("ACTION");
        tc.setMinWidth(50);
        tc.setCellRenderer(new ButtonsRenderer());
        tc.setCellEditor(new ButtonsEditor(tbUser));
        tbUser.setRowHeight(30);

        for (int i=1;i<tbUser.getColumnCount();i++)
        tbUser.getTableHeader().getColumnModel().getColumn(i)
        .setHeaderRenderer(new common.HeaderRenderer(tbUser, JLabel.CENTER));
        btLast = new javax.swing.JButton();
        btFirst = new javax.swing.JButton();
        btPrevious = new javax.swing.JButton();
        btNext = new javax.swing.JButton();
        txPage = new javax.swing.JTextField();
        lbCountPage = new javax.swing.JLabel();
        userEditFrame = new javax.swing.JInternalFrame();
        userEditFrame.getContentPane().setBackground(Color.WHITE);
        LabelAddUSer = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txInUserName = new javax.swing.JTextField();
        txPAss2 = new javax.swing.JPasswordField();
        txPAss1 = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        txFirstName = new javax.swing.JTextField();
        txLAstNAme = new javax.swing.JTextField();
        cbRoles = new javax.swing.JComboBox();
        txEmail = new javax.swing.JTextField();
        phone = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        companyName = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        txuserID = new javax.swing.JTextField();
        txuserID.setVisible(false);
        projectFrame = new javax.swing.JInternalFrame();
        jLabel21 = new javax.swing.JLabel();
        lbCountProjectTable = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        final String columnProject[] = {"id", "TITLE", "LEADER", "CLIENT", "START ON", "STATUS","ACTION"};
        tmTabelProject = new javax.swing.table.AbstractTableModel() {
            public int getColumnCount() {
                return columnProject.length;
            }

            public int getRowCount() {
                return vectorProject.size();
            }

            public Object getValueAt(int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorProject.elementAt(row1);
                return rowTMP.elementAt(column1);
            }

            public String getColumnName(int column1) {
                return columnProject[column1];
            }

            public boolean isCellEditable(int row1, int column1) {
                if (column1 == 6) {
                    return true;
                } else {
                    return false;
                }

            }

            public void setValueAt(Object obj, int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorProject.elementAt(row1);
                rowTMP.setElementAt(obj, column1);
            }

            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        };
        tbProject = new javax.swing.JTable(tmTabelProject);
        tbProject.setAutoResizeMode(tbProject.AUTO_RESIZE_OFF);
        tc=tbProject.getColumn("id");
        tc.setMinWidth(0);
        tc.setWidth(0);
        tc.setMaxWidth(0);
        tc=tbProject.getColumn("TITLE");
        tc.setMinWidth(185);
        tc=tbProject.getColumn("LEADER");
        tc.setMinWidth(179);
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbProject.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tc=tbProject.getColumn("CLIENT");
        tc.setMinWidth(178);
        tbProject.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tc=tbProject.getColumn("STATUS");
        tc.setMinWidth(105);
        tbProject.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tc=tbProject.getColumn("START ON");
        tc.setMinWidth(105);
        tbProject.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        tc=tbProject.getColumn("ACTION");
        tc.setMinWidth(50);
        tc.setCellRenderer(new ButtonsRenderer());
        tc.setCellEditor(new ButtonsEditorProjects(tbProject));
        tbProject.setRowHeight(35);

        tbProject.getTableHeader().getColumnModel().getColumn(1)
        .setHeaderRenderer(new common.HeaderRenderer(tbProject, JLabel.LEFT));

        for (int i=2;i<tbProject.getColumnCount();i++)
        tbProject.getTableHeader().getColumnModel().getColumn(i)
        .setHeaderRenderer(new common.HeaderRenderer(tbProject, JLabel.CENTER));
        btLastProject = new javax.swing.JButton();
        btNextProject = new javax.swing.JButton();
        lbPageCountProject = new javax.swing.JLabel();
        txPageProject = new javax.swing.JTextField();
        btPreviousProject = new javax.swing.JButton();
        btFirstProject = new javax.swing.JButton();
        searchProject = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        filterProject = new javax.swing.JComboBox();
        productsFrame = new javax.swing.JInternalFrame();
        jLabel13 = new javax.swing.JLabel();
        lbCountProductTable = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        filterProduct = new javax.swing.JComboBox();
        searchProduct = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        final String columnProducts[] = {"id", "ITEM", "SKU", "IN STOCK", "STOCK DATE", "ACTION"};
        tmTabelProducts = new javax.swing.table.AbstractTableModel() {
            public int getColumnCount() {
                return columnProducts.length;
            }

            public int getRowCount() {
                return vectorProducts.size();
            }

            public Object getValueAt(int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorProducts.elementAt(row1);
                return rowTMP.elementAt(column1);
            }

            public String getColumnName(int column1) {
                return columnProducts[column1];
            }

            public boolean isCellEditable(int row1, int column1) {
                if (column1 == 5) {
                    return true;
                } else {
                    return false;
                }

            }

            public void setValueAt(Object obj, int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorProducts.elementAt(row1);
                rowTMP.setElementAt(obj, column1);
            }

            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        };
        tbProduct = new javax.swing.JTable(tmTabelProducts);
        tbProduct.setAutoResizeMode(tbProduct.AUTO_RESIZE_OFF);
        tc=tbProduct.getColumn("id");
        tc.setMinWidth(0);
        tc.setWidth(0);
        tc.setMaxWidth(0);
        tc=tbProduct.getColumn("ITEM");
        tc.setMinWidth(430);
        tc=tbProduct.getColumn("SKU");
        tc.setMinWidth(109);
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbProduct.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tc=tbProduct.getColumn("IN STOCK");
        tc.setMinWidth(108);
        tbProduct.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tc=tbProduct.getColumn("STOCK DATE");
        tc.setMinWidth(105);
        tbProduct.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tc=tbProduct.getColumn("ACTION");
        tc.setMinWidth(50);
        tc.setCellRenderer(new ButtonsRenderer());
        tc.setCellEditor(new ButtonsEditorProducts(tbProduct));
        tbProduct.setRowHeight(35);

        tbProduct.getTableHeader().getColumnModel().getColumn(1)
        .setHeaderRenderer(new common.HeaderRenderer(tbProduct, JLabel.LEFT));

        for (int i=2;i<tbProduct.getColumnCount();i++)
        tbProduct.getTableHeader().getColumnModel().getColumn(i)
        .setHeaderRenderer(new common.HeaderRenderer(tbProduct, JLabel.CENTER));
        btFirstProduct = new javax.swing.JButton();
        btPreviousProduct = new javax.swing.JButton();
        txPageProduct = new javax.swing.JTextField();
        lbPageCountProduct = new javax.swing.JLabel();
        btNextProduct = new javax.swing.JButton();
        btLastProductLast = new javax.swing.JButton();
        productEditFrame = new javax.swing.JInternalFrame();
        LabelAddProducts = new javax.swing.JLabel();
        txProductsID = new javax.swing.JTextField();
        txProductsID.setVisible(false);
        jLabel15 = new javax.swing.JLabel();
        txItemName = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txSKU = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txQTY = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txDescription = new javax.swing.JTextPane();
        jLabel20 = new javax.swing.JLabel();
        txPrice = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        projectDetailFrame = new javax.swing.JInternalFrame();
        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel9 = new javax.swing.JPanel();
        btsaveProject = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        txProjectNAme = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        prjStatus = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        cbLeaderinProject = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txStartProject = new javax.swing.JFormattedTextField();
        try {
            MaskFormatter maskingdate= new MaskFormatter("##/##/####");
            maskingdate.setPlaceholderCharacter('_');
            txStartProject.setFormatterFactory(new DefaultFormatterFactory(maskingdate));
        }catch (Exception ex) {}
        jButton15 = new javax.swing.JButton();
        txDuedate = new javax.swing.JFormattedTextField();
        try {
            MaskFormatter maskingdate= new MaskFormatter("##/##/####");
            maskingdate.setPlaceholderCharacter('_');
            txDuedate.setFormatterFactory(new DefaultFormatterFactory(maskingdate));
        }catch (Exception ex) {}
        jButton16 = new javax.swing.JButton();
        cbClientinProject = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        txLocation = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        final String columnProductInProject[] = {"id", "product", "ACTION"};
        tmTableProductsInProject = new javax.swing.table.AbstractTableModel() {
            public int getColumnCount() {
                return columnProductInProject.length;
            }

            public int getRowCount() {
                return vectorProductsInProject.size();
            }

            public Object getValueAt(int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorProductsInProject.elementAt(row1);
                return rowTMP.elementAt(column1);
            }

            public String getColumnName(int column1) {
                return columnProductInProject[column1];
            }

            public boolean isCellEditable(int row1, int column1) {
                if (column1 == 2) {
                    return true;
                } else {
                    return false;
                }
            }

            public void setValueAt(Object obj, int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorProductsInProject.elementAt(row1);
                rowTMP.setElementAt(obj, column1);
            }

            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        };
        tbProductInProjects = new javax.swing.JTable(tmTableProductsInProject);

        tbProductInProjects.setAutoResizeMode(tbProductInProjects.AUTO_RESIZE_OFF);
        tc=tbProductInProjects.getColumn("id");
        tc.setMinWidth(0);
        tc.setWidth(0);
        tc.setMaxWidth(0);
        tc=tbProductInProjects.getColumn("product");
        tc.setMinWidth(365);
        tc=tbProductInProjects.getColumn("ACTION");
        tc.setCellRenderer(new ButtonsRendererbtXDelete());
        tc.setCellEditor(new ButtonsEditorXDelete(tbProductInProjects));
        tc.setMinWidth(25);
        tc.setWidth(25);
        tc.setMaxWidth(25);
        tbProductInProjects.setTableHeader(null);
        tbProductInProjects.setShowGrid(false);
        cbProductsInProject = new javax.swing.JComboBox();
        txQTYProductsinProject = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel7 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        final String columnPeopleinProject[] = {"id", "peopleName", "ACTION"};
        tmTabelPeopleInProject = new javax.swing.table.AbstractTableModel() {
            public int getColumnCount() {
                return columnPeopleinProject.length;
            }

            public int getRowCount() {
                return vectorPeopleInProject.size();
            }

            public Object getValueAt(int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorPeopleInProject.elementAt(row1);
                return rowTMP.elementAt(column1);
            }

            public String getColumnName(int column1) {
                return columnPeopleinProject[column1];
            }

            public boolean isCellEditable(int row1, int column1) {
                if (column1 == 2) {
                    return true;
                } else {
                    return false;
                }
            }

            public void setValueAt(Object obj, int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorPeopleInProject.elementAt(row1);
                rowTMP.setElementAt(obj, column1);
            }

            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        };
        tbPeopleinProject = new javax.swing.JTable(tmTabelPeopleInProject);
        tbPeopleinProject.setAutoResizeMode(tbPeopleinProject.AUTO_RESIZE_OFF);
        tc=tbPeopleinProject.getColumn("id");
        tc.setMinWidth(0);
        tc.setWidth(0);
        tc.setMaxWidth(0);
        tc=tbPeopleinProject.getColumn("peopleName");
        tc.setMinWidth(307);
        tc.setCellRenderer(new lbRenderPeople());
        tc=tbPeopleinProject.getColumn("ACTION");
        tc.setCellRenderer(new ButtonsRendererbtXDelete());
        tc.setCellEditor(new ButtonsEditorXDeletePeopleInProject(tbPeopleinProject));
        tc.setMinWidth(25);
        tc.setWidth(25);
        tc.setMaxWidth(25);
        tbPeopleinProject.setTableHeader(null);
        tbPeopleinProject.setShowGrid(false);
        cbPeopleInProject = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        txMaterial = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        txPeralatan = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txTenagaKErja = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        txOverHEadeCost = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        lbTotal = new javax.swing.JLabel();
        txManagementCost = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        txPPN = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel52 = new javax.swing.JLabel();
        lbGrandTotal = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        projectDescription = new panelLayout.txAreaDescription();
        txProjectid = new javax.swing.JTextField();
        txProjectid.setVisible(false);
        financeFrame = new javax.swing.JInternalFrame();
        userFrame.getContentPane().setBackground(Color.WHITE);
        jLabel30 = new javax.swing.JLabel();
        accountsFrame = new javax.swing.JInternalFrame();
        userFrame.getContentPane().setBackground(Color.WHITE);
        jLabel31 = new javax.swing.JLabel();
        countAccounts = new javax.swing.JLabel();
        searchProduct1 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        accName = new javax.swing.JTextField();
        acc = new javax.swing.JTextField();
        jButton20 = new javax.swing.JButton();
        scrolltbAccounts = new javax.swing.JScrollPane();
        final String columnAccounts[] = {"id","ACC#", "ACCOUNT NAME", "ACCOUNT GROUP", " "};
        tmTabelAccounts = new javax.swing.table.AbstractTableModel() {
            public int getColumnCount() {
                return columnAccounts.length;
            }

            public int getRowCount() {
                return vectorAccounts.size();
            }

            public Object getValueAt(int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorAccounts.elementAt(row1);
                return rowTMP.elementAt(column1);
            }

            public String getColumnName(int column1) {
                return columnAccounts[column1];
            }

            public boolean isCellEditable(int row1, int column1) {
                if (column1 == 4) {
                    return true;
                } else {
                    return false;
                }

            }

            public void setValueAt(Object obj, int row1, int column1) {
                java.util.Vector rowTMP = (java.util.Vector) vectorAccounts.elementAt(row1);
                rowTMP.setElementAt(obj, column1);
            }

            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        };
        tbAccounts = new javax.swing.JTable(tmTabelAccounts);
        tbAccounts.setAutoResizeMode(tbAccounts.AUTO_RESIZE_OFF);
        tc=tbAccounts.getColumn("id");
        tc.setMinWidth(0);
        tc.setWidth(0);
        tc.setMaxWidth(0);
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbAccounts.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        tc=tbAccounts.getColumn("ACC#");
        tc.setMinWidth(110);
        tc=tbAccounts.getColumn("ACCOUNT NAME");
        tc.setMinWidth(365);
        tbAccounts.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tc=tbAccounts.getColumn("ACCOUNT GROUP");
        tc.setMinWidth(317);
        tc=tbAccounts.getColumn(" ");
        tc.setMinWidth(35);
        tc.setMaxWidth(35);
        tc.setCellRenderer(new ButtonsRendererAccounts());
        tc.setCellEditor(new ButtonsEditorAccounts(tbAccounts));
        tbAccounts.setRowHeight(35);

        for (int i=1;i<tbAccounts.getColumnCount();i++)
        tbAccounts.getTableHeader().getColumnModel().getColumn(i)
        .setHeaderRenderer(new common.HeaderRenderer(tbAccounts, JLabel.CENTER));
        btFirstAccounts = new javax.swing.JButton();
        btPreviousAccounts = new javax.swing.JButton();
        txPageAccounts = new javax.swing.JTextField();
        lbPageCountAccounts = new javax.swing.JLabel();
        btNextAccounts = new javax.swing.JButton();
        btLastAccounts = new javax.swing.JButton();
        transactionsFrame = new javax.swing.JInternalFrame();
        userFrame.getContentPane().setBackground(Color.WHITE);
        jLabel33 = new javax.swing.JLabel();
        countTransactions = new javax.swing.JLabel();
        searchProduct2 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        scrolltbAccounts1 = new javax.swing.JScrollPane();
        tbTransactions = new javax.swing.JTable();
        btFirstTransactions = new javax.swing.JButton();
        btPreviousTransactions = new javax.swing.JButton();
        txPageTransactions = new javax.swing.JTextField();
        lbPageCountTransactions = new javax.swing.JLabel();
        btNextTransactions = new javax.swing.JButton();
        btLastTransactions = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();

        dateChooserDialog1.setCurrentView(new datechooser.view.appearance.AppearancesList("Light",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                    new java.awt.Color(51, 51, 51),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                    new java.awt.Color(51, 51, 51),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                    new java.awt.Color(51, 51, 51),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                    new java.awt.Color(51, 51, 51),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    dateChooserDialog1.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
    dateChooserDialog1.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
        public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
            dateChooserDialog1OnSelectionChange(evt);
        }
    });

    dateChooserDialog2.setCurrentView(new datechooser.view.appearance.AppearancesList("Light",
        new datechooser.view.appearance.ViewAppearance("custom",
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                new java.awt.Color(51, 51, 51),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.ButtonPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                new java.awt.Color(51, 51, 51),
                new java.awt.Color(0, 0, 255),
                true,
                true,
                new datechooser.view.appearance.swing.ButtonPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                new java.awt.Color(0, 0, 255),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.ButtonPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                new java.awt.Color(128, 128, 128),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.LabelPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                new java.awt.Color(51, 51, 51),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.LabelPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Arial", java.awt.Font.BOLD, 25),
                new java.awt.Color(51, 51, 51),
                new java.awt.Color(255, 0, 0),
                false,
                false,
                new datechooser.view.appearance.swing.ButtonPainter()),
            (datechooser.view.BackRenderer)null,
            false,
            true)));
dateChooserDialog2.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
dateChooserDialog2.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
    public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
        dateChooserDialog2OnSelectionChange(evt);
    }
    });

    menuPop.setBackground(new java.awt.Color(0, 0, 0));
    menuPop.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    menuPop.setForeground(new java.awt.Color(255, 255, 255));
    menuPop.setBorder(null);
    menuPop.setBorderPainted(false);
    menuPop.setPreferredSize(new java.awt.Dimension(100, 60));
    menuPop.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            menuPopMouseExited(evt);
        }
    });

    jMenuItem1.setBackground(new java.awt.Color(0, 0, 0));
    jMenuItem1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jMenuItem1.setForeground(new java.awt.Color(255, 255, 255));
    jMenuItem1.setMnemonic('P');
    jMenuItem1.setText("Edit Profile");
    jMenuItem1.setBorder(null);
    jMenuItem1.setBorderPainted(false);
    jMenuItem1.setPreferredSize(new java.awt.Dimension(83, 20));
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem1ActionPerformed(evt);
        }
    });
    menuPop.add(jMenuItem1);

    jMenuItem2.setBackground(new java.awt.Color(0, 0, 0));
    jMenuItem2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jMenuItem2.setForeground(new java.awt.Color(255, 255, 255));
    jMenuItem2.setMnemonic('L');
    jMenuItem2.setText("Log out");
    jMenuItem2.setBorder(null);
    jMenuItem2.setBorderPainted(false);
    jMenuItem2.setPreferredSize(new java.awt.Dimension(63, 20));
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem2ActionPerformed(evt);
        }
    });
    menuPop.add(jMenuItem2);
    menuPop.add(jSeparator1);

    jMenuItem3.setBackground(new java.awt.Color(0, 0, 0));
    jMenuItem3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jMenuItem3.setForeground(new java.awt.Color(255, 255, 255));
    jMenuItem3.setMnemonic('x');
    jMenuItem3.setText("Exit");
    jMenuItem3.setToolTipText("");
    jMenuItem3.setBorder(null);
    jMenuItem3.setBorderPainted(false);
    jMenuItem3.setPreferredSize(new java.awt.Dimension(63, 20));
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem3ActionPerformed(evt);
        }
    });
    menuPop.add(jMenuItem3);

    ProductPopMenu.setBackground(new java.awt.Color(0, 0, 0));
    ProductPopMenu.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    ProductPopMenu.setForeground(new java.awt.Color(255, 255, 255));
    ProductPopMenu.setBorder(null);
    ProductPopMenu.setBorderPainted(false);
    ProductPopMenu.setPreferredSize(new java.awt.Dimension(84, 30));
    ProductPopMenu.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            ProductPopMenuMouseExited(evt);
        }
    });

    jMenuItem4.setBackground(new java.awt.Color(255, 255, 255));
    jMenuItem4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jMenuItem4.setForeground(new java.awt.Color(0, 0, 0));
    jMenuItem4.setText("Delete");
    jMenuItem4.setBorder(null);
    jMenuItem4.setBorderPainted(false);
    jMenuItem4.setContentAreaFilled(false);
    jMenuItem4.setPreferredSize(new java.awt.Dimension(80, 30));
    jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem4ActionPerformed(evt);
        }
    });
    ProductPopMenu.add(jMenuItem4);

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Project mangement and inventory");
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter() {
        public void windowClosing(java.awt.event.WindowEvent evt) {
            formWindowClosing(evt);
        }
    });
    getContentPane().setLayout(null);

    panelMenu1.setLayout(null);

    jButton1.setBackground(new java.awt.Color(0, 0, 0));
    jButton1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jButton1.setForeground(new java.awt.Color(255, 255, 255));
    jButton1.setText("USERS");
    jButton1.setBorder(null);
    jButton1.setBorderPainted(false);
    jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton1.setFocusPainted(false);
    jButton1.setOpaque(false);
    jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            jButton1MouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            jButton1MouseEntered(evt);
        }
    });
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });
    panelMenu1.add(jButton1);
    jButton1.setBounds(450, 10, 90, 30);

    btLeftRoles.setBackground(new java.awt.Color(192, 192, 192));
    btLeftRoles.setForeground(new java.awt.Color(0, 0, 0));
    btLeftRoles.setText("ROLES");
    btLeftRoles.setBorder(null);
    btLeftRoles.setBorderPainted(false);
    btLeftRoles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btLeftRoles.setFocusPainted(false);
    btLeftRoles.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            btLeftRolesMouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            btLeftRolesMouseEntered(evt);
        }
    });
    btLeftRoles.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btLeftRolesActionPerformed(evt);
        }
    });
    panelMenu1.add(btLeftRoles);
    btLeftRoles.setBounds(0, 110, 160, 30);

    jButton3.setBackground(new java.awt.Color(0, 0, 0));
    jButton3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jButton3.setForeground(new java.awt.Color(255, 255, 255));
    jButton3.setText("PROJECT MANAGEMENT");
    jButton3.setBorder(null);
    jButton3.setBorderPainted(false);
    jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton3.setFocusPainted(false);
    jButton3.setOpaque(false);
    jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            jButton3MouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            jButton3MouseEntered(evt);
        }
    });
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });
    panelMenu1.add(jButton3);
    jButton3.setBounds(260, 10, 170, 30);

    lbFirstname.setBackground(new java.awt.Color(0, 0, 0));
    lbFirstname.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbFirstname.setForeground(new java.awt.Color(255, 255, 255));
    lbFirstname.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    lbFirstname.setText("firstname and lastname");
    lbFirstname.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    lbFirstname.setFocusable(false);
    lbFirstname.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            lbFirstnameMouseClicked(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            lbFirstnameMouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            lbFirstnameMouseEntered(evt);
        }
    });
    panelMenu1.add(lbFirstname);
    lbFirstname.setBounds(840, 0, 150, 50);

    jButton4.setBackground(new java.awt.Color(0, 0, 0));
    jButton4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jButton4.setForeground(new java.awt.Color(255, 255, 255));
    jButton4.setText("INVENTORY");
    jButton4.setBorder(null);
    jButton4.setBorderPainted(false);
    jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton4.setFocusPainted(false);
    jButton4.setOpaque(false);
    jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            jButton4MouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            jButton4MouseEntered(evt);
        }
    });
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });
    panelMenu1.add(jButton4);
    jButton4.setBounds(130, 10, 120, 30);

    btLeftUSer.setBackground(new java.awt.Color(192, 192, 192));
    btLeftUSer.setForeground(new java.awt.Color(0, 0, 0));
    btLeftUSer.setText("USERS");
    btLeftUSer.setBorder(null);
    btLeftUSer.setBorderPainted(false);
    btLeftUSer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btLeftUSer.setFocusPainted(false);
    btLeftUSer.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btLeftUSerActionPerformed(evt);
        }
    });
    panelMenu1.add(btLeftUSer);
    btLeftUSer.setBounds(0, 70, 160, 30);

    jDesktopPane1.setOpaque(false);

    userFrame.setBackground(new java.awt.Color(255, 255, 255));
    userFrame.setBorder(null);
    userFrame.setVisible(false);
    userFrame.getContentPane().setLayout(null);

    jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    jLabel1.setText("USERS");
    userFrame.getContentPane().add(jLabel1);
    jLabel1.setBounds(10, 10, 350, 40);

    lbCountUser.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbCountUser.setText("100 Users");
    userFrame.getContentPane().add(lbCountUser);
    lbCountUser.setBounds(10, 50, 340, 20);

    jButton6.setBackground(new java.awt.Color(0, 0, 0));
    jButton6.setForeground(new java.awt.Color(255, 255, 255));
    jButton6.setText("Add Users");
    jButton6.setBorder(null);
    jButton6.setBorderPainted(false);
    jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton6.setFocusPainted(false);
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });
    userFrame.getContentPane().add(jButton6);
    jButton6.setBounds(720, 20, 120, 30);

    filterSearch.setBackground(new java.awt.Color(0, 0, 0));
    filterSearch.setForeground(new java.awt.Color(255, 255, 255));
    filterSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Filter", "Name", "Role", "Email", "Company" }));
    userFrame.getContentPane().add(filterSearch);
    filterSearch.setBounds(520, 100, 140, 30);

    txSearch.setText("Search");
    txSearch.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txSearchFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            txSearchFocusLost(evt);
        }
    });
    txSearch.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txSearchKeyReleased(evt);
        }
    });
    userFrame.getContentPane().add(txSearch);
    txSearch.setBounds(700, 100, 140, 30);

    jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/searchIcon.png"))); // NOI18N
    userFrame.getContentPane().add(jLabel3);
    jLabel3.setBounds(680, 100, 30, 30);

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

    tbUser.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tbUserMouseClicked(evt);
        }
    });
    tbUser.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tbUserKeyReleased(evt);
        }
    });
    jScrollPane1.setViewportView(tbUser);

    userFrame.getContentPane().add(jScrollPane1);
    jScrollPane1.setBounds(10, 140, 830, 470);

    btLast.setBackground(new java.awt.Color(0, 0, 0));
    btLast.setForeground(new java.awt.Color(255, 255, 255));
    btLast.setText(">>");
    btLast.setBorder(null);
    btLast.setBorderPainted(false);
    btLast.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btLast.setFocusPainted(false);
    btLast.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btLastActionPerformed(evt);
        }
    });
    userFrame.getContentPane().add(btLast);
    btLast.setBounds(370, 620, 60, 30);

    btFirst.setBackground(new java.awt.Color(0, 0, 0));
    btFirst.setForeground(new java.awt.Color(255, 255, 255));
    btFirst.setText("<<");
    btFirst.setBorder(null);
    btFirst.setBorderPainted(false);
    btFirst.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btFirst.setFocusPainted(false);
    btFirst.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btFirstActionPerformed(evt);
        }
    });
    userFrame.getContentPane().add(btFirst);
    btFirst.setBounds(10, 620, 60, 30);

    btPrevious.setBackground(new java.awt.Color(0, 0, 0));
    btPrevious.setForeground(new java.awt.Color(255, 255, 255));
    btPrevious.setText("<");
    btPrevious.setBorder(null);
    btPrevious.setBorderPainted(false);
    btPrevious.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btPrevious.setFocusPainted(false);
    btPrevious.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btPreviousActionPerformed(evt);
        }
    });
    userFrame.getContentPane().add(btPrevious);
    btPrevious.setBounds(80, 620, 60, 30);

    btNext.setBackground(new java.awt.Color(0, 0, 0));
    btNext.setForeground(new java.awt.Color(255, 255, 255));
    btNext.setText(">");
    btNext.setBorder(null);
    btNext.setBorderPainted(false);
    btNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btNext.setFocusPainted(false);
    btNext.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btNextActionPerformed(evt);
        }
    });
    userFrame.getContentPane().add(btNext);
    btNext.setBounds(300, 620, 60, 30);

    txPage.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
    txPage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txPage.setText("0");
    txPage.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            txPageFocusLost(evt);
        }
    });
    txPage.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPageKeyReleased(evt);
        }
    });
    userFrame.getContentPane().add(txPage);
    txPage.setBounds(150, 620, 60, 30);

    lbCountPage.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbCountPage.setText("of 10000");
    userFrame.getContentPane().add(lbCountPage);
    lbCountPage.setBounds(220, 620, 70, 30);

    userFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(userFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    userEditFrame.setBackground(new java.awt.Color(255, 255, 255));
    userEditFrame.setBorder(null);
    userEditFrame.setVisible(false);
    userEditFrame.getContentPane().setLayout(null);

    LabelAddUSer.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    LabelAddUSer.setText("ADD USER");
    userEditFrame.getContentPane().add(LabelAddUSer);
    LabelAddUSer.setBounds(10, 10, 320, 40);

    jPanel1.setBackground(new java.awt.Color(255, 255, 255));
    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Login information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
    jPanel1.setLayout(null);

    jLabel6.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel6.setText("User Name");
    jPanel1.add(jLabel6);
    jLabel6.setBounds(20, 20, 160, 25);

    jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel5.setText("Password");
    jPanel1.add(jLabel5);
    jLabel5.setBounds(20, 50, 160, 25);

    jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel2.setText("Password required");
    jPanel1.add(jLabel2);
    jLabel2.setBounds(20, 80, 160, 25);

    txInUserName.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txInUserNameKeyReleased(evt);
        }
    });
    jPanel1.add(txInUserName);
    txInUserName.setBounds(200, 20, 250, 25);

    txPAss2.setEchoChar('*');
    txPAss2.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPAss2KeyReleased(evt);
        }
    });
    jPanel1.add(txPAss2);
    txPAss2.setBounds(200, 80, 250, 25);

    txPAss1.setEchoChar('*');
    txPAss1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPAss1KeyReleased(evt);
        }
    });
    jPanel1.add(txPAss1);
    txPAss1.setBounds(200, 50, 250, 25);

    userEditFrame.getContentPane().add(jPanel1);
    jPanel1.setBounds(10, 80, 710, 120);

    jPanel2.setBackground(new java.awt.Color(255, 255, 255));
    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "User information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
    jPanel2.setLayout(null);

    jLabel7.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel7.setText("First name");
    jPanel2.add(jLabel7);
    jLabel7.setBounds(20, 20, 160, 25);

    jLabel8.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel8.setText("Last name");
    jPanel2.add(jLabel8);
    jLabel8.setBounds(20, 50, 160, 25);

    jLabel9.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel9.setText("Role");
    jPanel2.add(jLabel9);
    jLabel9.setBounds(20, 80, 160, 25);

    jLabel11.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel11.setText("Email");
    jPanel2.add(jLabel11);
    jLabel11.setBounds(20, 110, 160, 25);

    jLabel12.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel12.setText("Phone");
    jPanel2.add(jLabel12);
    jLabel12.setBounds(20, 140, 160, 25);

    jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel4.setText("Address");
    jPanel2.add(jLabel4);
    jLabel4.setBounds(20, 170, 160, 25);

    address.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            addressKeyReleased(evt);
        }
    });
    jPanel2.add(address);
    address.setBounds(200, 170, 250, 25);

    txFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txFirstNameKeyReleased(evt);
        }
    });
    jPanel2.add(txFirstName);
    txFirstName.setBounds(200, 20, 250, 25);

    txLAstNAme.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txLAstNAmeKeyReleased(evt);
        }
    });
    jPanel2.add(txLAstNAme);
    txLAstNAme.setBounds(200, 50, 250, 25);

    cbRoles.setBackground(new java.awt.Color(255, 255, 255));
    cbRoles.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            cbRolesKeyReleased(evt);
        }
    });
    jPanel2.add(cbRoles);
    cbRoles.setBounds(200, 80, 250, 24);

    txEmail.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txEmailKeyReleased(evt);
        }
    });
    jPanel2.add(txEmail);
    txEmail.setBounds(200, 110, 250, 25);

    phone.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            phoneKeyReleased(evt);
        }
    });
    jPanel2.add(phone);
    phone.setBounds(200, 140, 250, 25);

    userEditFrame.getContentPane().add(jPanel2);
    jPanel2.setBounds(10, 210, 710, 210);

    jPanel3.setBackground(new java.awt.Color(255, 255, 255));
    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Company information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
    jPanel3.setLayout(null);

    jLabel10.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel10.setText("Company name");
    jPanel3.add(jLabel10);
    jLabel10.setBounds(20, 30, 160, 25);
    jPanel3.add(companyName);
    companyName.setBounds(200, 30, 250, 25);

    userEditFrame.getContentPane().add(jPanel3);
    jPanel3.setBounds(10, 430, 710, 80);

    jButton7.setBackground(new java.awt.Color(204, 204, 204));
    jButton7.setText("Cancel");
    jButton7.setBorder(null);
    jButton7.setBorderPainted(false);
    jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton7.setFocusPainted(false);
    jButton7.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton7ActionPerformed(evt);
        }
    });
    userEditFrame.getContentPane().add(jButton7);
    jButton7.setBounds(130, 530, 94, 30);

    jButton8.setBackground(new java.awt.Color(0, 0, 0));
    jButton8.setForeground(new java.awt.Color(255, 255, 255));
    jButton8.setText("Save");
    jButton8.setBorder(null);
    jButton8.setBorderPainted(false);
    jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton8.setFocusPainted(false);
    jButton8.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton8ActionPerformed(evt);
        }
    });
    userEditFrame.getContentPane().add(jButton8);
    jButton8.setBounds(20, 530, 90, 30);
    userEditFrame.getContentPane().add(txuserID);
    txuserID.setBounds(500, 50, 80, 19);

    userEditFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(userEditFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    projectFrame.setBorder(null);
    projectFrame.setVisible(false);
    projectFrame.getContentPane().setLayout(null);

    jLabel21.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    jLabel21.setText("PROJECTS");
    projectFrame.getContentPane().add(jLabel21);
    jLabel21.setBounds(10, 10, 360, 40);

    lbCountProjectTable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbCountProjectTable.setText("100 Users");
    projectFrame.getContentPane().add(lbCountProjectTable);
    lbCountProjectTable.setBounds(10, 50, 360, 20);

    jButton14.setBackground(new java.awt.Color(0, 0, 0));
    jButton14.setForeground(new java.awt.Color(255, 255, 255));
    jButton14.setText("Add Projects");
    jButton14.setBorder(null);
    jButton14.setBorderPainted(false);
    jButton14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton14.setFocusPainted(false);
    jButton14.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton14ActionPerformed(evt);
        }
    });
    projectFrame.getContentPane().add(jButton14);
    jButton14.setBounds(720, 20, 120, 30);

    jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

    tbProject.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tbProjectMouseClicked(evt);
        }
    });
    tbProject.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tbProjectKeyReleased(evt);
        }
    });
    jScrollPane4.setViewportView(tbProject);

    projectFrame.getContentPane().add(jScrollPane4);
    jScrollPane4.setBounds(10, 140, 830, 470);

    btLastProject.setBackground(new java.awt.Color(0, 0, 0));
    btLastProject.setForeground(new java.awt.Color(255, 255, 255));
    btLastProject.setText(">>");
    btLastProject.setBorder(null);
    btLastProject.setBorderPainted(false);
    btLastProject.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btLastProject.setFocusPainted(false);
    btLastProject.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btLastProjectActionPerformed(evt);
        }
    });
    projectFrame.getContentPane().add(btLastProject);
    btLastProject.setBounds(370, 620, 60, 30);

    btNextProject.setBackground(new java.awt.Color(0, 0, 0));
    btNextProject.setForeground(new java.awt.Color(255, 255, 255));
    btNextProject.setText(">");
    btNextProject.setBorder(null);
    btNextProject.setBorderPainted(false);
    btNextProject.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btNextProject.setFocusPainted(false);
    btNextProject.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btNextProjectActionPerformed(evt);
        }
    });
    projectFrame.getContentPane().add(btNextProject);
    btNextProject.setBounds(300, 620, 60, 30);

    lbPageCountProject.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbPageCountProject.setText("of 10000");
    projectFrame.getContentPane().add(lbPageCountProject);
    lbPageCountProject.setBounds(220, 620, 70, 30);

    txPageProject.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
    txPageProject.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txPageProject.setText("0");
    txPageProject.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            txPageProjectFocusLost(evt);
        }
    });
    txPageProject.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPageProjectKeyReleased(evt);
        }
    });
    projectFrame.getContentPane().add(txPageProject);
    txPageProject.setBounds(150, 620, 60, 30);

    btPreviousProject.setBackground(new java.awt.Color(0, 0, 0));
    btPreviousProject.setForeground(new java.awt.Color(255, 255, 255));
    btPreviousProject.setText("<");
    btPreviousProject.setBorder(null);
    btPreviousProject.setBorderPainted(false);
    btPreviousProject.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btPreviousProject.setFocusPainted(false);
    btPreviousProject.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btPreviousProjectActionPerformed(evt);
        }
    });
    projectFrame.getContentPane().add(btPreviousProject);
    btPreviousProject.setBounds(80, 620, 60, 30);

    btFirstProject.setBackground(new java.awt.Color(0, 0, 0));
    btFirstProject.setForeground(new java.awt.Color(255, 255, 255));
    btFirstProject.setText("<<");
    btFirstProject.setBorder(null);
    btFirstProject.setBorderPainted(false);
    btFirstProject.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btFirstProject.setFocusPainted(false);
    btFirstProject.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btFirstProjectActionPerformed(evt);
        }
    });
    projectFrame.getContentPane().add(btFirstProject);
    btFirstProject.setBounds(10, 620, 60, 30);

    searchProject.setText("Search");
    searchProject.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            searchProjectFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            searchProjectFocusLost(evt);
        }
    });
    searchProject.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchProjectKeyReleased(evt);
        }
    });
    projectFrame.getContentPane().add(searchProject);
    searchProject.setBounds(700, 100, 140, 30);

    jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/searchIcon.png"))); // NOI18N
    projectFrame.getContentPane().add(jLabel18);
    jLabel18.setBounds(680, 100, 30, 30);

    filterProject.setBackground(new java.awt.Color(0, 0, 0));
    filterProject.setForeground(new java.awt.Color(255, 255, 255));
    filterProject.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Filter", "TITLE", "LEADER", "CLIENT", "START ON", "STATUS" }));
    projectFrame.getContentPane().add(filterProject);
    filterProject.setBounds(520, 100, 140, 30);

    projectFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(projectFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    productsFrame.setBackground(new java.awt.Color(255, 255, 255));
    productsFrame.setBorder(null);
    productsFrame.setVisible(false);
    productsFrame.getContentPane().setLayout(null);

    jLabel13.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    jLabel13.setText("PRODUCTS");
    productsFrame.getContentPane().add(jLabel13);
    jLabel13.setBounds(10, 10, 240, 40);

    lbCountProductTable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbCountProductTable.setText("100 Users");
    productsFrame.getContentPane().add(lbCountProductTable);
    lbCountProductTable.setBounds(10, 50, 180, 20);

    jButton9.setBackground(new java.awt.Color(0, 0, 0));
    jButton9.setForeground(new java.awt.Color(255, 255, 255));
    jButton9.setText("Add Products");
    jButton9.setBorder(null);
    jButton9.setBorderPainted(false);
    jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton9.setFocusPainted(false);
    jButton9.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton9ActionPerformed(evt);
        }
    });
    productsFrame.getContentPane().add(jButton9);
    jButton9.setBounds(720, 20, 120, 30);

    filterProduct.setBackground(new java.awt.Color(0, 0, 0));
    filterProduct.setForeground(new java.awt.Color(255, 255, 255));
    filterProduct.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Filter", "Name", "SKU", "Price", "Category" }));
    productsFrame.getContentPane().add(filterProduct);
    filterProduct.setBounds(520, 100, 140, 30);

    searchProduct.setText("Search");
    searchProduct.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            searchProductFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            searchProductFocusLost(evt);
        }
    });
    searchProduct.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchProductKeyReleased(evt);
        }
    });
    productsFrame.getContentPane().add(searchProduct);
    searchProduct.setBounds(700, 100, 140, 30);

    jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/searchIcon.png"))); // NOI18N
    productsFrame.getContentPane().add(jLabel14);
    jLabel14.setBounds(680, 100, 30, 30);

    jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

    tbProduct.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tbProductMouseClicked(evt);
        }
    });
    tbProduct.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tbProductKeyReleased(evt);
        }
    });
    jScrollPane2.setViewportView(tbProduct);

    productsFrame.getContentPane().add(jScrollPane2);
    jScrollPane2.setBounds(10, 140, 830, 470);

    btFirstProduct.setBackground(new java.awt.Color(0, 0, 0));
    btFirstProduct.setForeground(new java.awt.Color(255, 255, 255));
    btFirstProduct.setText("<<");
    btFirstProduct.setBorder(null);
    btFirstProduct.setBorderPainted(false);
    btFirstProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btFirstProduct.setFocusPainted(false);
    btFirstProduct.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btFirstProductActionPerformed(evt);
        }
    });
    productsFrame.getContentPane().add(btFirstProduct);
    btFirstProduct.setBounds(10, 620, 60, 30);

    btPreviousProduct.setBackground(new java.awt.Color(0, 0, 0));
    btPreviousProduct.setForeground(new java.awt.Color(255, 255, 255));
    btPreviousProduct.setText("<");
    btPreviousProduct.setBorder(null);
    btPreviousProduct.setBorderPainted(false);
    btPreviousProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btPreviousProduct.setFocusPainted(false);
    btPreviousProduct.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btPreviousProductActionPerformed(evt);
        }
    });
    productsFrame.getContentPane().add(btPreviousProduct);
    btPreviousProduct.setBounds(80, 620, 60, 30);

    txPageProduct.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
    txPageProduct.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txPageProduct.setText("0");
    txPageProduct.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            txPageProductFocusLost(evt);
        }
    });
    txPageProduct.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPageProductKeyReleased(evt);
        }
    });
    productsFrame.getContentPane().add(txPageProduct);
    txPageProduct.setBounds(150, 620, 60, 30);

    lbPageCountProduct.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbPageCountProduct.setText("of 10000");
    productsFrame.getContentPane().add(lbPageCountProduct);
    lbPageCountProduct.setBounds(220, 620, 70, 30);

    btNextProduct.setBackground(new java.awt.Color(0, 0, 0));
    btNextProduct.setForeground(new java.awt.Color(255, 255, 255));
    btNextProduct.setText(">");
    btNextProduct.setBorder(null);
    btNextProduct.setBorderPainted(false);
    btNextProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btNextProduct.setFocusPainted(false);
    btNextProduct.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btNextProductActionPerformed(evt);
        }
    });
    productsFrame.getContentPane().add(btNextProduct);
    btNextProduct.setBounds(300, 620, 60, 30);

    btLastProductLast.setBackground(new java.awt.Color(0, 0, 0));
    btLastProductLast.setForeground(new java.awt.Color(255, 255, 255));
    btLastProductLast.setText(">>");
    btLastProductLast.setBorder(null);
    btLastProductLast.setBorderPainted(false);
    btLastProductLast.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btLastProductLast.setFocusPainted(false);
    btLastProductLast.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btLastProductLastActionPerformed(evt);
        }
    });
    productsFrame.getContentPane().add(btLastProductLast);
    btLastProductLast.setBounds(370, 620, 60, 30);

    productsFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(productsFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    productEditFrame.setBackground(new java.awt.Color(255, 255, 255));
    productEditFrame.setBorder(null);
    productEditFrame.setVisible(false);
    productEditFrame.getContentPane().setLayout(null);

    LabelAddProducts.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    LabelAddProducts.setText("ADD PRODUCTS");
    productEditFrame.getContentPane().add(LabelAddProducts);
    LabelAddProducts.setBounds(10, 10, 330, 40);
    productEditFrame.getContentPane().add(txProductsID);
    txProductsID.setBounds(490, 20, 80, 19);

    jLabel15.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel15.setText("Item Name");
    productEditFrame.getContentPane().add(jLabel15);
    jLabel15.setBounds(10, 110, 160, 25);

    txItemName.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txItemNameKeyReleased(evt);
        }
    });
    productEditFrame.getContentPane().add(txItemName);
    txItemName.setBounds(110, 110, 250, 25);

    jLabel16.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel16.setText("SKU");
    productEditFrame.getContentPane().add(jLabel16);
    jLabel16.setBounds(10, 150, 160, 25);

    txSKU.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txSKUKeyReleased(evt);
        }
    });
    productEditFrame.getContentPane().add(txSKU);
    txSKU.setBounds(110, 150, 250, 25);

    jLabel17.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel17.setText("Description");
    productEditFrame.getContentPane().add(jLabel17);
    jLabel17.setBounds(10, 230, 160, 25);

    txQTY.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txQTYKeyReleased(evt);
        }
    });
    productEditFrame.getContentPane().add(txQTY);
    txQTY.setBounds(110, 190, 250, 25);

    jLabel19.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel19.setText("Qty.");
    productEditFrame.getContentPane().add(jLabel19);
    jLabel19.setBounds(10, 190, 160, 25);

    txDescription.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txDescriptionKeyReleased(evt);
        }
    });
    jScrollPane3.setViewportView(txDescription);

    productEditFrame.getContentPane().add(jScrollPane3);
    jScrollPane3.setBounds(110, 230, 250, 120);

    jLabel20.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel20.setText("Price");
    productEditFrame.getContentPane().add(jLabel20);
    jLabel20.setBounds(10, 360, 160, 25);

    txPrice.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPriceKeyReleased(evt);
        }
    });
    productEditFrame.getContentPane().add(txPrice);
    txPrice.setBounds(110, 360, 250, 25);

    jButton10.setBackground(new java.awt.Color(0, 0, 0));
    jButton10.setForeground(new java.awt.Color(255, 255, 255));
    jButton10.setText("Save");
    jButton10.setBorder(null);
    jButton10.setBorderPainted(false);
    jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton10.setFocusPainted(false);
    jButton10.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton10ActionPerformed(evt);
        }
    });
    productEditFrame.getContentPane().add(jButton10);
    jButton10.setBounds(10, 410, 90, 30);

    jButton11.setBackground(new java.awt.Color(204, 204, 204));
    jButton11.setText("Cancel");
    jButton11.setBorder(null);
    jButton11.setBorderPainted(false);
    jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton11.setFocusPainted(false);
    jButton11.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton11ActionPerformed(evt);
        }
    });
    productEditFrame.getContentPane().add(jButton11);
    jButton11.setBounds(110, 410, 94, 30);

    jButton19.setBackground(new java.awt.Color(0, 0, 0));
    jButton19.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jButton19.setForeground(new java.awt.Color(255, 255, 255));
    jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bottomArrow.png"))); // NOI18N
    jButton19.setText("Actions");
    jButton19.setBorder(null);
    jButton19.setBorderPainted(false);
    jButton19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton19.setFocusPainted(false);
    jButton19.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            jButton19MouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            jButton19MouseEntered(evt);
        }
    });
    jButton19.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
        public void mouseMoved(java.awt.event.MouseEvent evt) {
            jButton19MouseMoved(evt);
        }
    });
    jButton19.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton19ActionPerformed(evt);
        }
    });
    productEditFrame.getContentPane().add(jButton19);
    jButton19.setBounds(400, 10, 84, 30);

    productEditFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(productEditFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    projectDetailFrame.setBackground(new java.awt.Color(255, 255, 255));
    projectDetailFrame.setBorder(null);
    projectDetailFrame.setVisible(false);
    projectDetailFrame.getContentPane().setLayout(null);

    jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPane7.setFocusCycleRoot(true);
    jScrollPane7.setFocusTraversalPolicyProvider(true);

    jPanel9.setBackground(new java.awt.Color(255, 255, 255));
    jPanel9.setAutoscrolls(true);
    jPanel9.setPreferredSize(new java.awt.Dimension(700, 1550));
    jPanel9.setLayout(null);

    btsaveProject.setBackground(new java.awt.Color(0, 0, 0));
    btsaveProject.setForeground(new java.awt.Color(255, 255, 255));
    btsaveProject.setText("Save");
    btsaveProject.setBorder(null);
    btsaveProject.setBorderPainted(false);
    btsaveProject.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btsaveProject.setFocusPainted(false);
    btsaveProject.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btsaveProjectActionPerformed(evt);
        }
    });
    jPanel9.add(btsaveProject);
    btsaveProject.setBounds(670, 10, 70, 30);

    jButton13.setBackground(new java.awt.Color(204, 204, 204));
    jButton13.setText("Cancel");
    jButton13.setBorder(null);
    jButton13.setBorderPainted(false);
    jButton13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton13.setFocusPainted(false);
    jButton13.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton13ActionPerformed(evt);
        }
    });
    jPanel9.add(jButton13);
    jButton13.setBounds(750, 10, 80, 30);

    txProjectNAme.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
    txProjectNAme.setText("PROJECT NAME");
    txProjectNAme.setNextFocusableComponent(projectDescription);
    txProjectNAme.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txProjectNAmeFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            txProjectNAmeFocusLost(evt);
        }
    });
    txProjectNAme.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txProjectNAmeKeyReleased(evt);
        }
    });
    jPanel9.add(txProjectNAme);
    txProjectNAme.setBounds(10, 10, 650, 30);

    jPanel4.setForeground(new java.awt.Color(204, 204, 204));
    jPanel4.setLayout(null);

    jLabel22.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel22.setText("Location");
    jPanel4.add(jLabel22);
    jLabel22.setBounds(10, 210, 160, 30);

    prjStatus.setBackground(new java.awt.Color(255, 255, 255));
    prjStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<html><font color=#F52887>Pending</font></html>", "<html><font color=orange>In Process</font></html>", "<html><font color=green>Finished</font></html>" }));
    jPanel4.add(prjStatus);
    prjStatus.setBounds(110, 170, 230, 30);

    jLabel23.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel23.setText("Leader");
    jPanel4.add(jLabel23);
    jLabel23.setBounds(10, 10, 160, 30);

    cbLeaderinProject.setBackground(new java.awt.Color(255, 255, 255));
    jPanel4.add(cbLeaderinProject);
    cbLeaderinProject.setBounds(110, 10, 230, 30);

    jLabel24.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel24.setText("Client");
    jPanel4.add(jLabel24);
    jLabel24.setBounds(10, 50, 160, 30);

    jLabel25.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel25.setText("Start on");
    jPanel4.add(jLabel25);
    jLabel25.setBounds(10, 90, 160, 30);

    jLabel26.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel26.setText("Due date");
    jPanel4.add(jLabel26);
    jLabel26.setBounds(10, 130, 160, 30);

    txStartProject.setText("__/__/____");
    txStartProject.setNextFocusableComponent(txDuedate);
    txStartProject.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txStartProjectKeyReleased(evt);
        }
    });
    jPanel4.add(txStartProject);
    txStartProject.setBounds(110, 90, 190, 30);

    jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/JDateChooserIcon.gif"))); // NOI18N
    jButton15.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton15ActionPerformed(evt);
        }
    });
    jPanel4.add(jButton15);
    jButton15.setBounds(310, 90, 30, 30);

    txDuedate.setText("__/__/____");
    txDuedate.setNextFocusableComponent(prjStatus);
    jPanel4.add(txDuedate);
    txDuedate.setBounds(110, 130, 190, 30);

    jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/JDateChooserIcon.gif"))); // NOI18N
    jButton16.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton16ActionPerformed(evt);
        }
    });
    jPanel4.add(jButton16);
    jButton16.setBounds(310, 130, 30, 30);

    cbClientinProject.setBackground(new java.awt.Color(255, 255, 255));
    jPanel4.add(cbClientinProject);
    cbClientinProject.setBounds(110, 50, 230, 30);

    jLabel35.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel35.setText("Status");
    jPanel4.add(jLabel35);
    jLabel35.setBounds(10, 170, 160, 30);

    txLocation.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txLocationKeyReleased(evt);
        }
    });
    jPanel4.add(txLocation);
    txLocation.setBounds(110, 210, 230, 30);

    jPanel9.add(jPanel4);
    jPanel4.setBounds(10, 190, 440, 260);

    jPanel5.setLayout(null);

    jLabel27.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    jLabel27.setText("Products on this project");
    jPanel5.add(jLabel27);
    jLabel27.setBounds(10, 10, 280, 30);

    jScrollPane5.setBorder(null);
    jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPane5.setOpaque(false);

    tbProductInProjects.setBackground(new java.awt.Color(238, 238, 238));
    tbProductInProjects.setOpaque(false);
    tbProductInProjects.setRowHeight(30);
    tbProductInProjects.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tbProductInProjectsKeyReleased(evt);
        }
    });
    jScrollPane5.setViewportView(tbProductInProjects);

    jPanel5.add(jScrollPane5);
    jScrollPane5.setBounds(10, 40, 410, 100);
    jScrollPane5.setBorder(null);
    jScrollPane5.setBorder(BorderFactory.createEmptyBorder());

    cbProductsInProject.setBackground(new java.awt.Color(255, 255, 255));
    jPanel5.add(cbProductsInProject);
    cbProductsInProject.setBounds(10, 150, 200, 25);

    txQTYProductsinProject.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txQTYProductsinProject.setText("0");
    txQTYProductsinProject.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txQTYProductsinProjectFocusGained(evt);
        }
    });
    txQTYProductsinProject.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txQTYProductsinProjectKeyReleased(evt);
        }
    });
    jPanel5.add(txQTYProductsinProject);
    txQTYProductsinProject.setBounds(220, 150, 100, 25);

    jButton2.setBackground(new java.awt.Color(0, 0, 0));
    jButton2.setForeground(new java.awt.Color(255, 255, 255));
    jButton2.setText("Add New");
    jButton2.setBorder(null);
    jButton2.setBorderPainted(false);
    jButton2.setFocusPainted(false);
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });
    jPanel5.add(jButton2);
    jButton2.setBounds(330, 150, 90, 25);

    jPanel9.add(jPanel5);
    jPanel5.setBounds(10, 460, 440, 190);

    jPanel6.setLayout(null);

    jLabel28.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    jLabel28.setText("Project Progress");
    jPanel6.add(jLabel28);
    jLabel28.setBounds(10, 10, 230, 22);
    jPanel6.add(jProgressBar1);
    jProgressBar1.setBounds(10, 40, 350, 20);

    jPanel9.add(jPanel6);
    jPanel6.setBounds(460, 190, 370, 80);

    jPanel7.setLayout(null);

    jLabel29.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    jLabel29.setText("People on This Project");
    jPanel7.add(jLabel29);
    jLabel29.setBounds(10, 10, 320, 22);

    jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

    tbPeopleinProject.setBackground(new java.awt.Color(238, 238, 238));
    tbPeopleinProject.setOpaque(false);
    tbPeopleinProject.setRowHeight(30);
    tbPeopleinProject.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tbPeopleinProjectKeyReleased(evt);
        }
    });
    jScrollPane6.setViewportView(tbPeopleinProject);

    jScrollPane6.setBorder(null);
    jScrollPane6.setBorder(BorderFactory.createEmptyBorder());
    jPanel7.add(jScrollPane6);
    jScrollPane6.setBounds(10, 40, 350, 150);

    cbPeopleInProject.setBackground(new java.awt.Color(255, 255, 255));
    jPanel7.add(cbPeopleInProject);
    cbPeopleInProject.setBounds(10, 200, 240, 25);

    jButton5.setBackground(new java.awt.Color(0, 0, 0));
    jButton5.setForeground(new java.awt.Color(255, 255, 255));
    jButton5.setText("Add New");
    jButton5.setBorder(null);
    jButton5.setBorderPainted(false);
    jButton5.setFocusPainted(false);
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });
    jPanel7.add(jButton5);
    jButton5.setBounds(260, 200, 100, 25);

    jPanel9.add(jPanel7);
    jPanel7.setBounds(460, 280, 370, 240);

    jPanel10.setLayout(null);

    jLabel36.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    jLabel36.setText("Allocated Budget");
    jPanel10.add(jLabel36);
    jLabel36.setBounds(10, 10, 280, 30);

    txMaterial.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txMaterial.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txMaterialFocusGained(evt);
        }
    });
    txMaterial.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txMaterialKeyReleased(evt);
        }
    });
    jPanel10.add(txMaterial);
    txMaterial.setBounds(180, 50, 200, 30);

    jLabel37.setBackground(new java.awt.Color(204, 204, 204));
    jLabel37.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel37.setText(" Rp.");
    jLabel37.setOpaque(true);
    jPanel10.add(jLabel37);
    jLabel37.setBounds(150, 50, 40, 30);

    jLabel38.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel38.setText("Material");
    jPanel10.add(jLabel38);
    jLabel38.setBounds(10, 50, 120, 30);

    jLabel39.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel39.setText("Peralatan");
    jPanel10.add(jLabel39);
    jLabel39.setBounds(10, 90, 120, 30);

    txPeralatan.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txPeralatan.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txPeralatanFocusGained(evt);
        }
    });
    txPeralatan.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPeralatanKeyReleased(evt);
        }
    });
    jPanel10.add(txPeralatan);
    txPeralatan.setBounds(180, 90, 200, 30);

    jLabel40.setBackground(new java.awt.Color(204, 204, 204));
    jLabel40.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel40.setText(" Rp.");
    jLabel40.setOpaque(true);
    jPanel10.add(jLabel40);
    jLabel40.setBounds(150, 90, 40, 30);

    txTenagaKErja.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txTenagaKErja.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txTenagaKErjaFocusGained(evt);
        }
    });
    txTenagaKErja.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txTenagaKErjaKeyReleased(evt);
        }
    });
    jPanel10.add(txTenagaKErja);
    txTenagaKErja.setBounds(180, 130, 200, 30);

    jLabel41.setBackground(new java.awt.Color(204, 204, 204));
    jLabel41.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel41.setText(" Rp.");
    jLabel41.setOpaque(true);
    jPanel10.add(jLabel41);
    jLabel41.setBounds(150, 130, 40, 30);

    jLabel42.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel42.setText("Tenaga Kerja");
    jPanel10.add(jLabel42);
    jLabel42.setBounds(10, 130, 120, 30);

    jLabel43.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel43.setText("Overhead Cost");
    jPanel10.add(jLabel43);
    jLabel43.setBounds(10, 170, 120, 30);

    txOverHEadeCost.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txOverHEadeCost.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txOverHEadeCostFocusGained(evt);
        }
    });
    txOverHEadeCost.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txOverHEadeCostKeyReleased(evt);
        }
    });
    jPanel10.add(txOverHEadeCost);
    txOverHEadeCost.setBounds(180, 170, 200, 30);

    jLabel44.setBackground(new java.awt.Color(204, 204, 204));
    jLabel44.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel44.setText(" Rp.");
    jLabel44.setOpaque(true);
    jPanel10.add(jLabel44);
    jLabel44.setBounds(150, 170, 40, 30);

    lbTotal.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    lbTotal.setOpaque(true);
    jPanel10.add(lbTotal);
    lbTotal.setBounds(180, 260, 200, 30);

    txManagementCost.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txManagementCost.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txManagementCostFocusGained(evt);
        }
    });
    txManagementCost.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txManagementCostKeyReleased(evt);
        }
    });
    jPanel10.add(txManagementCost);
    txManagementCost.setBounds(180, 210, 200, 30);
    jPanel10.add(jSeparator2);
    jSeparator2.setBounds(10, 340, 400, 10);

    jLabel46.setBackground(new java.awt.Color(204, 204, 204));
    jLabel46.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel46.setText(" Rp.");
    jLabel46.setOpaque(true);
    jPanel10.add(jLabel46);
    jLabel46.setBounds(150, 260, 50, 30);

    jLabel47.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel47.setText("Management Cost");
    jPanel10.add(jLabel47);
    jLabel47.setBounds(10, 210, 120, 30);

    jLabel48.setBackground(new java.awt.Color(204, 204, 204));
    jLabel48.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel48.setText(" Rp.");
    jLabel48.setOpaque(true);
    jPanel10.add(jLabel48);
    jLabel48.setBounds(150, 210, 40, 30);

    jLabel49.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel49.setText("Total");
    jPanel10.add(jLabel49);
    jLabel49.setBounds(10, 260, 120, 30);

    jLabel50.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel50.setText("PPN");
    jPanel10.add(jLabel50);
    jLabel50.setBounds(10, 300, 120, 30);

    txPPN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txPPN.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txPPNFocusGained(evt);
        }
    });
    txPPN.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPPNKeyReleased(evt);
        }
    });
    jPanel10.add(txPPN);
    txPPN.setBounds(150, 300, 200, 30);

    jLabel51.setBackground(new java.awt.Color(204, 204, 204));
    jLabel51.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel51.setText("% ");
    jLabel51.setOpaque(true);
    jPanel10.add(jLabel51);
    jLabel51.setBounds(340, 300, 40, 30);
    jPanel10.add(jSeparator3);
    jSeparator3.setBounds(10, 252, 410, 10);

    jLabel52.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel52.setText("Grand Total");
    jPanel10.add(jLabel52);
    jLabel52.setBounds(10, 350, 120, 30);

    lbGrandTotal.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbGrandTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    lbGrandTotal.setOpaque(true);
    jPanel10.add(lbGrandTotal);
    lbGrandTotal.setBounds(180, 350, 200, 30);

    jLabel53.setBackground(new java.awt.Color(204, 204, 204));
    jLabel53.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel53.setText(" Rp.");
    jLabel53.setOpaque(true);
    jPanel10.add(jLabel53);
    jLabel53.setBounds(150, 350, 50, 30);

    jPanel9.add(jPanel10);
    jPanel10.setBounds(10, 660, 440, 390);

    jButton17.setBackground(new java.awt.Color(255, 0, 51));
    jButton17.setForeground(new java.awt.Color(255, 255, 255));
    jButton17.setText("Delete This Project");
    jButton17.setBorder(null);
    jButton17.setBorderPainted(false);
    jButton17.setFocusPainted(false);
    jPanel9.add(jButton17);
    jButton17.setBounds(460, 530, 350, 25);

    projectDescription.setColumns(20);
    projectDescription.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            projectDescriptionFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            projectDescriptionFocusLost(evt);
        }
    });
    jScrollPane8.setViewportView(projectDescription);

    jPanel9.add(jScrollPane8);
    jScrollPane8.setBounds(10, 50, 650, 120);

    jScrollPane7.setViewportView(jPanel9);

    projectDetailFrame.getContentPane().add(jScrollPane7);
    jScrollPane7.setBounds(0, 0, 860, 1150);

    txProjectid.setEditable(false);
    txProjectid.setText("jTextField1");
    projectDetailFrame.getContentPane().add(txProjectid);
    txProjectid.setBounds(0, 0, 70, 19);

    projectDetailFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(projectDetailFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    financeFrame.setBackground(new java.awt.Color(255, 255, 255));
    financeFrame.setBorder(null);
    financeFrame.setVisible(false);
    financeFrame.getContentPane().setLayout(null);

    jLabel30.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    jLabel30.setText("FINANCE");
    financeFrame.getContentPane().add(jLabel30);
    jLabel30.setBounds(10, 10, 350, 40);

    financeFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(financeFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    accountsFrame.setBackground(new java.awt.Color(255, 255, 255));
    accountsFrame.setBorder(null);
    accountsFrame.setVisible(false);
    accountsFrame.getContentPane().setLayout(null);

    jLabel31.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    jLabel31.setText("ACCOUNTS");
    accountsFrame.getContentPane().add(jLabel31);
    jLabel31.setBounds(10, 10, 350, 40);

    countAccounts.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    countAccounts.setText("100 Users");
    accountsFrame.getContentPane().add(countAccounts);
    countAccounts.setBounds(10, 50, 180, 20);

    searchProduct1.setText("Search");
    searchProduct1.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            searchProduct1FocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            searchProduct1FocusLost(evt);
        }
    });
    searchProduct1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchProduct1KeyReleased(evt);
        }
    });
    accountsFrame.getContentPane().add(searchProduct1);
    searchProduct1.setBounds(690, 10, 140, 30);

    jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/searchIcon.png"))); // NOI18N
    accountsFrame.getContentPane().add(jLabel32);
    jLabel32.setBounds(670, 10, 30, 30);

    jPanel8.setLayout(null);

    accName.setForeground(new java.awt.Color(204, 204, 204));
    accName.setText("Account Name");
    accName.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            accNameFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            accNameFocusLost(evt);
        }
    });
    accName.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            accNameKeyReleased(evt);
        }
    });
    jPanel8.add(accName);
    accName.setBounds(90, 10, 310, 25);

    acc.setForeground(new java.awt.Color(204, 204, 204));
    acc.setText("ACC#");
    acc.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            accFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            accFocusLost(evt);
        }
    });
    acc.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            accKeyReleased(evt);
        }
    });
    jPanel8.add(acc);
    acc.setBounds(10, 10, 70, 25);

    jButton20.setBackground(new java.awt.Color(0, 0, 0));
    jButton20.setForeground(new java.awt.Color(255, 255, 255));
    jButton20.setText("Add");
    jButton20.setBorder(null);
    jButton20.setBorderPainted(false);
    jButton20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton20.setFocusPainted(false);
    jButton20.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton20ActionPerformed(evt);
        }
    });
    jPanel8.add(jButton20);
    jButton20.setBounds(410, 10, 70, 25);

    accountsFrame.getContentPane().add(jPanel8);
    jPanel8.setBounds(350, 100, 490, 45);

    scrolltbAccounts.setBorder(null);
    scrolltbAccounts.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    scrolltbAccounts.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

    tbAccounts.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tbAccountsMouseClicked(evt);
        }
    });
    tbAccounts.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tbAccountsKeyReleased(evt);
        }
    });
    scrolltbAccounts.setViewportView(tbAccounts);

    accountsFrame.getContentPane().add(scrolltbAccounts);
    scrolltbAccounts.setBounds(10, 160, 830, 442);

    btFirstAccounts.setBackground(new java.awt.Color(0, 0, 0));
    btFirstAccounts.setForeground(new java.awt.Color(255, 255, 255));
    btFirstAccounts.setText("<<");
    btFirstAccounts.setBorder(null);
    btFirstAccounts.setBorderPainted(false);
    btFirstAccounts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btFirstAccounts.setFocusPainted(false);
    btFirstAccounts.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btFirstAccountsActionPerformed(evt);
        }
    });
    accountsFrame.getContentPane().add(btFirstAccounts);
    btFirstAccounts.setBounds(10, 620, 60, 30);

    btPreviousAccounts.setBackground(new java.awt.Color(0, 0, 0));
    btPreviousAccounts.setForeground(new java.awt.Color(255, 255, 255));
    btPreviousAccounts.setText("<");
    btPreviousAccounts.setBorder(null);
    btPreviousAccounts.setBorderPainted(false);
    btPreviousAccounts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btPreviousAccounts.setFocusPainted(false);
    btPreviousAccounts.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btPreviousAccountsActionPerformed(evt);
        }
    });
    accountsFrame.getContentPane().add(btPreviousAccounts);
    btPreviousAccounts.setBounds(80, 620, 60, 30);

    txPageAccounts.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
    txPageAccounts.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txPageAccounts.setText("0");
    txPageAccounts.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            txPageAccountsFocusLost(evt);
        }
    });
    txPageAccounts.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPageAccountsKeyReleased(evt);
        }
    });
    accountsFrame.getContentPane().add(txPageAccounts);
    txPageAccounts.setBounds(150, 620, 60, 30);

    lbPageCountAccounts.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbPageCountAccounts.setText("of 10000");
    accountsFrame.getContentPane().add(lbPageCountAccounts);
    lbPageCountAccounts.setBounds(220, 620, 70, 30);

    btNextAccounts.setBackground(new java.awt.Color(0, 0, 0));
    btNextAccounts.setForeground(new java.awt.Color(255, 255, 255));
    btNextAccounts.setText(">");
    btNextAccounts.setBorder(null);
    btNextAccounts.setBorderPainted(false);
    btNextAccounts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btNextAccounts.setFocusPainted(false);
    btNextAccounts.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btNextAccountsActionPerformed(evt);
        }
    });
    accountsFrame.getContentPane().add(btNextAccounts);
    btNextAccounts.setBounds(300, 620, 60, 30);

    btLastAccounts.setBackground(new java.awt.Color(0, 0, 0));
    btLastAccounts.setForeground(new java.awt.Color(255, 255, 255));
    btLastAccounts.setText(">>");
    btLastAccounts.setBorder(null);
    btLastAccounts.setBorderPainted(false);
    btLastAccounts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btLastAccounts.setFocusPainted(false);
    btLastAccounts.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btLastAccountsActionPerformed(evt);
        }
    });
    accountsFrame.getContentPane().add(btLastAccounts);
    btLastAccounts.setBounds(370, 620, 60, 30);

    accountsFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(accountsFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    transactionsFrame.setBackground(new java.awt.Color(255, 255, 255));
    transactionsFrame.setBorder(null);
    transactionsFrame.setVisible(false);
    transactionsFrame.getContentPane().setLayout(null);

    jLabel33.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    jLabel33.setText("TRANSACTIONS");
    transactionsFrame.getContentPane().add(jLabel33);
    jLabel33.setBounds(10, 10, 350, 40);

    countTransactions.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    countTransactions.setText("100 Transactions");
    transactionsFrame.getContentPane().add(countTransactions);
    countTransactions.setBounds(10, 50, 180, 20);

    searchProduct2.setText("Search");
    searchProduct2.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            searchProduct2FocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            searchProduct2FocusLost(evt);
        }
    });
    searchProduct2.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchProduct2KeyReleased(evt);
        }
    });
    transactionsFrame.getContentPane().add(searchProduct2);
    searchProduct2.setBounds(690, 10, 140, 30);

    jLabel34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/searchIcon.png"))); // NOI18N
    transactionsFrame.getContentPane().add(jLabel34);
    jLabel34.setBounds(670, 10, 30, 30);

    scrolltbAccounts1.setBorder(null);

    tbTransactions.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tbTransactionsMouseClicked(evt);
        }
    });
    tbTransactions.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tbTransactionsKeyReleased(evt);
        }
    });
    scrolltbAccounts1.setViewportView(tbTransactions);

    transactionsFrame.getContentPane().add(scrolltbAccounts1);
    scrolltbAccounts1.setBounds(10, 140, 830, 470);

    btFirstTransactions.setBackground(new java.awt.Color(0, 0, 0));
    btFirstTransactions.setForeground(new java.awt.Color(255, 255, 255));
    btFirstTransactions.setText("<<");
    btFirstTransactions.setBorder(null);
    btFirstTransactions.setBorderPainted(false);
    btFirstTransactions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btFirstTransactions.setFocusPainted(false);
    btFirstTransactions.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btFirstTransactionsActionPerformed(evt);
        }
    });
    transactionsFrame.getContentPane().add(btFirstTransactions);
    btFirstTransactions.setBounds(10, 620, 60, 30);

    btPreviousTransactions.setBackground(new java.awt.Color(0, 0, 0));
    btPreviousTransactions.setForeground(new java.awt.Color(255, 255, 255));
    btPreviousTransactions.setText("<");
    btPreviousTransactions.setBorder(null);
    btPreviousTransactions.setBorderPainted(false);
    btPreviousTransactions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btPreviousTransactions.setFocusPainted(false);
    btPreviousTransactions.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btPreviousTransactionsActionPerformed(evt);
        }
    });
    transactionsFrame.getContentPane().add(btPreviousTransactions);
    btPreviousTransactions.setBounds(80, 620, 60, 30);

    txPageTransactions.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
    txPageTransactions.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txPageTransactions.setText("0");
    txPageTransactions.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            txPageTransactionsFocusLost(evt);
        }
    });
    txPageTransactions.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txPageTransactionsKeyReleased(evt);
        }
    });
    transactionsFrame.getContentPane().add(txPageTransactions);
    txPageTransactions.setBounds(150, 620, 60, 30);

    lbPageCountTransactions.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    lbPageCountTransactions.setText("of 10000");
    transactionsFrame.getContentPane().add(lbPageCountTransactions);
    lbPageCountTransactions.setBounds(220, 620, 70, 30);

    btNextTransactions.setBackground(new java.awt.Color(0, 0, 0));
    btNextTransactions.setForeground(new java.awt.Color(255, 255, 255));
    btNextTransactions.setText(">");
    btNextTransactions.setBorder(null);
    btNextTransactions.setBorderPainted(false);
    btNextTransactions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btNextTransactions.setFocusPainted(false);
    btNextTransactions.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btNextTransactionsActionPerformed(evt);
        }
    });
    transactionsFrame.getContentPane().add(btNextTransactions);
    btNextTransactions.setBounds(300, 620, 60, 30);

    btLastTransactions.setBackground(new java.awt.Color(0, 0, 0));
    btLastTransactions.setForeground(new java.awt.Color(255, 255, 255));
    btLastTransactions.setText(">>");
    btLastTransactions.setBorder(null);
    btLastTransactions.setBorderPainted(false);
    btLastTransactions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btLastTransactions.setFocusPainted(false);
    btLastTransactions.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btLastTransactionsActionPerformed(evt);
        }
    });
    transactionsFrame.getContentPane().add(btLastTransactions);
    btLastTransactions.setBounds(370, 620, 60, 30);

    transactionsFrame.setBounds(0, 0, 860, 720);
    jDesktopPane1.add(transactionsFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

    panelMenu1.add(jDesktopPane1);
    jDesktopPane1.setBounds(160, 50, 860, 720);

    jButton18.setBackground(new java.awt.Color(0, 0, 0));
    jButton18.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jButton18.setForeground(new java.awt.Color(255, 255, 255));
    jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bottomArrow.png"))); // NOI18N
    jButton18.setBorder(null);
    jButton18.setBorderPainted(false);
    jButton18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton18.setFocusPainted(false);
    jButton18.setOpaque(false);
    jButton18.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jButton18MouseClicked(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            jButton18MouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            jButton18MouseEntered(evt);
        }
    });
    jButton18.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
        public void mouseMoved(java.awt.event.MouseEvent evt) {
            jButton18MouseMoved(evt);
        }
    });
    jButton18.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton18ActionPerformed(evt);
        }
    });
    panelMenu1.add(jButton18);
    jButton18.setBounds(990, 0, 20, 50);

    jButton12.setBackground(new java.awt.Color(0, 0, 0));
    jButton12.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jButton12.setForeground(new java.awt.Color(255, 255, 255));
    jButton12.setText("FINANCE");
    jButton12.setBorder(null);
    jButton12.setBorderPainted(false);
    jButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton12.setFocusPainted(false);
    jButton12.setOpaque(false);
    jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseExited(java.awt.event.MouseEvent evt) {
            jButton12MouseExited(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            jButton12MouseEntered(evt);
        }
    });
    jButton12.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton12ActionPerformed(evt);
        }
    });
    panelMenu1.add(jButton12);
    jButton12.setBounds(560, 10, 90, 30);

    getContentPane().add(panelMenu1);
    panelMenu1.setBounds(0, 0, 1020, 770);

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-1030)/2, (screenSize.height-800)/2, 1030, 800);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (javax.swing.JOptionPane.showConfirmDialog(null, "Are you sure to Exit?", "Question",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        closeAllInternalFrame();
        disableALlButtonHeader();
        jButton1MouseEntered(null);
        btLeftUSer.setVisible(true);
        btLeftUSer.setText("USERS");
        btLeftRoles.setVisible(true);
        btLeftRoles.setText("ROLES");
        userFrame.setVisible(true);
        viewUser();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btLeftUSerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLeftUSerActionPerformed
        if (btLeftUSer.getText().equalsIgnoreCase("USERS")) {
            jButton1ActionPerformed(null);
        } else if (btLeftUSer.getText().equalsIgnoreCase("TRANSACTIONS")) {
            closeAllInternalFrame();
            transactionsFrame.setVisible(true);
        }
    }//GEN-LAST:event_btLeftUSerActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        closeAllInternalFrame();
        disableALlButtonHeader();
        jButton3MouseEntered(null);
        projectFrame.setVisible(true);
        viewProjects();
    }//GEN-LAST:event_jButton3ActionPerformed

    void clearAddUSerFrame() {
        txInUserName.setEditable(true);
        txuserID.setText("");
        txInUserName.setText("");
        txPAss1.setText("");
        txPAss2.setText("");
        txFirstName.setText("");
        txLAstNAme.setText("");
        txEmail.setText("");
        phone.setText("");
        address.setText("");
        companyName.setText("");
        cbRoles.setSelectedItem("team");
    }

    int getIdROlesFromNAme(String str) {
        int getBack = 100;
        common.functionCommon fc = new common.functionCommon();
        try {
            String qry = "select id from roles  where name ='" + str + "'";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            while (rs.next()) {
                getBack = rs.getInt("id");
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("1error in getIdROlesFromNAme " + ex.getMessage());
            }
        }
        return getBack;
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        closeAllInternalFrame();
        btLeftUSer.setVisible(true);
        btLeftRoles.setVisible(true);
        userEditFrame.setVisible(true);
        LabelAddUSer.setText("ADD USER");
        // add roles options
        common.functionCommon fc = new common.functionCommon();
        try {
            String qry = "select id,name from roles ";
            if (role_id != 0) {
                qry += " where id!=0 ";
            }
            qry += " order by name";
            if (fc.isDebugging) {
                System.out.println(" qry = " + qry);
            }
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            cbRoles.removeAllItems();
            while (rs.next()) {
                cbRoles.addItem(rs.getString("name"));
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error in jButton6ActionPerformed " + ex.getMessage());
            }
        }
        // end add roles options
        clearAddUSerFrame();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (btLeftUSer.isVisible()) {
            jButton1ActionPerformed(null);
        } else {
            closeAllInternalFrame();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    boolean isEmailExistonEdit(String mail, String userID) {
        common.functionCommon fc = new common.functionCommon();
        boolean getBack = false;
        try {
            String qry = "select id from user where email='" + mail + "' and id<>" + userID;
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                getBack = true;
                javax.swing.JOptionPane.showConfirmDialog(null, "This email already exist", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error isEmailExist " + ex.getMessage());
            }
        }
        return getBack;
    }

    boolean isEmailExist(String mail) {
        common.functionCommon fc = new common.functionCommon();
        boolean getBack = false;
        try {
            String qry = "select id from user where email='" + mail + "'";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                getBack = true;
                javax.swing.JOptionPane.showConfirmDialog(null, "This email already exist", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error isEmailExist " + ex.getMessage());
            }
        }
        return getBack;
    }

    boolean isUserNameExist(String str) {
        common.functionCommon fc = new common.functionCommon();
        boolean getBack = false;
        try {
            String qry = "select id from user where username='" + str + "'";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                getBack = true;
                javax.swing.JOptionPane.showConfirmDialog(null, "This username already exist", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error isEmailExist " + ex.getMessage());
            }
        }
        return getBack;
    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String qry = "";
        boolean canAccess = true;
        String pass1 = new String(txPAss1.getPassword());
        String pass2 = new String(txPAss2.getPassword());
        common.functionCommon fc = new common.functionCommon();
        if (txuserID.getText().length() < 1) {
            if (txInUserName.getText().length() < 1) {
                canAccess = false;
                txInUserName.requestFocus();
                javax.swing.JOptionPane.showConfirmDialog(null, "Enter username", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            } else if (pass1.length() < 1) {
                canAccess = false;
                txPAss1.requestFocus();
                javax.swing.JOptionPane.showConfirmDialog(null, "Enter password", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            } else if (pass2.length() < 1) {
                canAccess = false;
                txPAss2.requestFocus();
                javax.swing.JOptionPane.showConfirmDialog(null, "Enter required Password", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            } else if (!pass1.equalsIgnoreCase(pass2)) {
                canAccess = false;
                txPAss2.requestFocus();
                javax.swing.JOptionPane.showConfirmDialog(null, "Password not match", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            }
            if (txEmail.getText().length() > 0 && canAccess) {

                if (!fc.isValidEmailAddress(txEmail.getText()) && canAccess) {
                    txEmail.requestFocus();
                    canAccess = false;
                    javax.swing.JOptionPane.showConfirmDialog(null, "Email not valid", "Information",
                            javax.swing.JOptionPane.PLAIN_MESSAGE);
                }

                if (isEmailExist(txEmail.getText()) && canAccess) {
                    txEmail.requestFocus();
                    canAccess = false;
                }
            }

            if (txInUserName.getText().length() > 0 && canAccess) {
                if (isUserNameExist(txInUserName.getText())) {
                    txInUserName.requestFocus();
                    canAccess = false;
                }
            }
            if (canAccess) {


                String EnkripPAssword = fc.MD5(pass1);
                try {
                    if (txuserID.getText().length() < 1) {
                        qry = "insert into user (username,email,first_name,last_name,"
                                + "password,company_name,phone,address,"
                                + "roles_id,created_at,modified_at) values ('" + txInUserName.getText() + "'"
                                + ",'" + txEmail.getText() + "'"
                                + ",'" + txFirstName.getText() + "'"
                                + ",'" + txLAstNAme.getText() + "'"
                                + ",'" + EnkripPAssword + "'"
                                + ",'" + companyName.getText() + "'"
                                + ",'" + phone.getText() + "'"
                                + ",'" + address.getText() + "'"
                                + "," + getIdROlesFromNAme(cbRoles.getSelectedItem().toString()) + ""
                                + ",now(),now());";
                    }

                    if (fc.isDebugging) {
                        System.out.println(" qry = " + qry);
                    }
                    Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                    Statement st = cn.createStatement();
                    st.executeUpdate(qry);



                    st.close();
                    cn.close();
                } catch (Exception ex) {
                    if (fc.isDebugging) {
                        System.out.println("error in jButton8ActionPerformed " + ex.getMessage());
                    }
                }
            }
        } else {
            //check password if want to change password
            String changPAssword = "";
            if (pass1.length() > 0 && pass2.length() == 0) {
                canAccess = false;
                txPAss2.requestFocus();
                javax.swing.JOptionPane.showConfirmDialog(null, "Enter password", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            } else if (pass1.length() == 0 && pass2.length() > 0) {
                canAccess = false;
                txPAss1.requestFocus();
                javax.swing.JOptionPane.showConfirmDialog(null, "Enter password", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            } else if (pass1.length() > 0 && pass2.length() > 0) {
                if (pass1.equalsIgnoreCase(pass2)) {
                    String EnkripPAssword = fc.MD5(pass1);
                    changPAssword = " ,password = '" + EnkripPAssword + "' ";
                } else {
                    canAccess = false;
                    txPAss2.requestFocus();
                    javax.swing.JOptionPane.showConfirmDialog(null, "Password not match", "Information",
                            javax.swing.JOptionPane.PLAIN_MESSAGE);
                }
            }

            if (txEmail.getText().length() > 0 && canAccess) {
                if (!fc.isValidEmailAddress(txEmail.getText()) && canAccess) {
                    txEmail.requestFocus();
                    canAccess = false;
                    javax.swing.JOptionPane.showConfirmDialog(null, "Email not valid", "Information",
                            javax.swing.JOptionPane.PLAIN_MESSAGE);
                }

                if (isEmailExistonEdit(txEmail.getText(), txuserID.getText()) && canAccess) {
                    txEmail.requestFocus();
                    canAccess = false;
                }
            }

            if (canAccess) {
                try {
                    qry = "update user set email='" + txEmail.getText() + "',"
                            + "first_name='" + txFirstName.getText() + "'"
                            + ",last_name='" + txLAstNAme.getText() + "'"
                            + ",company_name='" + companyName.getText() + "'"
                            + ",phone='" + phone.getText() + "'"
                            + ",address='" + address.getText() + "'"
                            + ",roles_id=" + getIdROlesFromNAme(cbRoles.getSelectedItem().toString())
                            + ",modified_at=now()" + changPAssword + " where id=" + txuserID.getText();
                    Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                    Statement st = cn.createStatement();
                    st.executeUpdate(qry);
                    st.close();
                    cn.close();
                    if (btLeftUSer.isVisible()) {
                        jButton7ActionPerformed(null);
                    } else {
                        lbFirstname.setText(txFirstName.getText() + " " + txLAstNAme.getText());
                    }
                } catch (Exception ex) {
                    if (fc.isDebugging) {
                        System.out.println(" erro in update user " + ex.getMessage());
                    }
                }
            }

            if (fc.isDebugging) {
                System.out.println(" update user " + qry);
            }
            //end check password 
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void txFirstNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txFirstNameKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txLAstNAme.requestFocus();
        }
    }//GEN-LAST:event_txFirstNameKeyReleased

    private void txLAstNAmeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txLAstNAmeKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            cbRoles.requestFocus();
        }
    }//GEN-LAST:event_txLAstNAmeKeyReleased

    private void cbRolesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbRolesKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txEmail.requestFocus();
        }
    }//GEN-LAST:event_cbRolesKeyReleased

    private void phoneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            address.requestFocus();
        }
    }//GEN-LAST:event_phoneKeyReleased

    private void addressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            companyName.requestFocus();
        }
    }//GEN-LAST:event_addressKeyReleased

    private void txInUserNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txInUserNameKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txPAss1.requestFocus();
        }
    }//GEN-LAST:event_txInUserNameKeyReleased

    private void txPAss1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPAss1KeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txPAss2.requestFocus();
        }
    }//GEN-LAST:event_txPAss1KeyReleased

    private void txPAss2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPAss2KeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txFirstName.requestFocus();
        }
    }//GEN-LAST:event_txPAss2KeyReleased

    private void txEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txEmailKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            phone.requestFocus();
        }
    }//GEN-LAST:event_txEmailKeyReleased

    private void btNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextActionPerformed
        txPage.setText(String.valueOf(Integer.valueOf(txPage.getText()) + 1));
        viewUser();
    }//GEN-LAST:event_btNextActionPerformed

    private void btPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousActionPerformed
        txPage.setText(String.valueOf(Integer.valueOf(txPage.getText()) - 1));
        viewUser();
    }//GEN-LAST:event_btPreviousActionPerformed

    private void btFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFirstActionPerformed
        txPage.setText("1");
        viewUser();
    }//GEN-LAST:event_btFirstActionPerformed

    private void btLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLastActionPerformed
        txPage.setText(String.valueOf(lastPageUSer));
        viewUser();
    }//GEN-LAST:event_btLastActionPerformed

    private void txPageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPageKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (txPage.getText().length() > 0) {
                common.functionCommon cf = new common.functionCommon();
                if (!cf.isNumeric(txPage.getText())) {
                    txPage.setText("1");
                }
            } else {
                txPage.setText("1");
            }
            viewUser();
        }
    }//GEN-LAST:event_txPageKeyReleased

    public void deletePeopleInProject(JTable table) {
        if (javax.swing.JOptionPane.showConfirmDialog(null, "Delete this People?", "Question",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            common.functionCommon fc = new common.functionCommon();
            try {
                String qry = "";
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                int rowTable[] = table.getSelectedRows();
                for (int x = 0; x < rowTable.length; x++) {
                    if (x > 0) {
                        qry += ",";
                    }
                    qry += table.getValueAt(rowTable[x], 0).toString();
                }
                qry = "delete from cache_people_in_project where id_people in (" + qry + ");";
                if (fc.isDebugging) {
                    System.out.println(" qry delete accounts = " + qry);
                }
                st.executeUpdate(qry);
                st.close();
                cn.close();
                refreshTablePeopleINProject();
                refreshcbPeopleInProject();
            } catch (Exception ex) {
                if (fc.isDebugging) {
                    System.out.println(" error in deleteProductInProject " + ex.getMessage());
                }
            }
        }
    }

    public void deleteProductInProject(JTable table) {
        if (javax.swing.JOptionPane.showConfirmDialog(null, "Delete this products?", "Question",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            common.functionCommon fc = new common.functionCommon();
            try {
                String qry = "";
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                int rowTable[] = table.getSelectedRows();
                for (int x = 0; x < rowTable.length; x++) {
                    if (x > 0) {
                        qry += ",";
                    }
                    qry += table.getValueAt(rowTable[x], 0).toString();
                }
                qry = "delete from cache_products_in_project where id in (" + qry + ");";
                if (fc.isDebugging) {
                    System.out.println(" qry delete accounts = " + qry);
                }
                st.executeUpdate(qry);
                st.close();
                cn.close();
                refreshTableProductInProject();
                refreshcbProductsInProject();
            } catch (Exception ex) {
                if (fc.isDebugging) {
                    System.out.println(" error in deleteProductInProject " + ex.getMessage());
                }
            }
        }
    }

    public void deleteAccounts(JTable table) {
        if (javax.swing.JOptionPane.showConfirmDialog(null, "Delete this Accounts?", "Question",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            common.functionCommon fc = new common.functionCommon();
            try {
                String qry = "";
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                int rowTable[] = table.getSelectedRows();
                for (int x = 0; x < rowTable.length; x++) {
                    if (x > 0) {
                        qry += ",";
                    }
                    qry += table.getValueAt(rowTable[x], 0).toString();
                }
                qry = "delete from accounts where id in (" + qry + ");";
                if (fc.isDebugging) {
                    System.out.println(" qry delete accounts = " + qry);
                }
                st.executeUpdate(qry);
                st.close();
                cn.close();
                viewAccounts();
            } catch (Exception ex) {
                if (fc.isDebugging) {
                    System.out.println(" error in delete Accounts " + ex.getMessage());
                }
            }
        }
    }

    public void dropDataProduct(JTable table) {
        if (javax.swing.JOptionPane.showConfirmDialog(null, "Delete this Inventory?", "Question",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            common.functionCommon fc = new common.functionCommon();
            try {
                String qry = "";
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                int rowTable[] = table.getSelectedRows();
                for (int x = 0; x < rowTable.length; x++) {
                    if (x > 0) {
                        qry += ",";
                    }
                    qry += table.getValueAt(rowTable[x], 0).toString();
                }
                String itemIDLISt = qry;
                qry = "delete from inventory_prices where inventory_id in "
                        + "(select id from inventories where item_id in "
                        + "(select id from items where id in (" + itemIDLISt + ")))";
                System.out.println("qry 1 " + qry);
                st.executeUpdate(qry);
                qry = "delete from inventories where item_id in "
                        + "(select id from items where id in (" + itemIDLISt + "))";
                System.out.println("qry 2 " + qry);
                st.executeUpdate(qry);

                qry = "delete from items where id in (" + itemIDLISt + ");";
                if (fc.isDebugging) {
                    System.out.println(" qry delete inventory = " + qry);
                }
                st.executeUpdate(qry);
                st.close();
                cn.close();
                viewProducts();
            } catch (Exception ex) {
                if (fc.isDebugging) {
                    System.out.println(" error in delete inventory " + ex.getMessage());
                }
            }
        }
    }

    public boolean OnlySuperAdminCandeleteAdmin(int roleSelected, JTable table) {
        boolean getBack = true;
        common.functionCommon fc = new common.functionCommon();
        try {
            String qry = "";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = null;
            int rowTable[] = table.getSelectedRows();
            int i = 0;
            boolean searching = true;
            while (i < rowTable.length && searching) {
                qry = "select roles_id from user where id = " + table.getValueAt(rowTable[i], 0).toString();
                rs = st.executeQuery(qry);
                if (rs.next()) {
                    if (rs.getInt("roles_id") == 1) {
                        searching = false;
                        getBack = false;
                        javax.swing.JOptionPane.showConfirmDialog(null, "This user is admin", "Information",
                                javax.swing.JOptionPane.PLAIN_MESSAGE);
                    }
                }
                i++;
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println(" error in OnlySuperAdminCandeleteAdmin " + ex.getMessage());
            }
        }
        return getBack;
    }

    public void dropDataUSer(JTable table) {
        if (OnlySuperAdminCandeleteAdmin(role_id, table)) {
            if (javax.swing.JOptionPane.showConfirmDialog(null, "Delete this user?", "Question",
                    javax.swing.JOptionPane.YES_NO_OPTION,
                    javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
                common.functionCommon fc = new common.functionCommon();
                try {
                    String qry = "";
                    Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                    Statement st = cn.createStatement();
                    int rowTable[] = table.getSelectedRows();
                    for (int x = 0; x < rowTable.length; x++) {
                        if (x > 0) {
                            qry += ",";
                        }
                        qry += table.getValueAt(rowTable[x], 0).toString();
                    }
                    qry = "delete from user where id in (" + qry + ");";
                    if (fc.isDebugging) {
                        System.out.println(" qry delete user = " + qry);
                    }
                    st.executeUpdate(qry);
                    st.close();
                    cn.close();
                    viewUser();
                } catch (Exception ex) {
                    if (fc.isDebugging) {
                        System.out.println(" error in delete user " + ex.getMessage());
                    }
                }
            }
        }
    }

    public void prepareEditUSer(String userEditted) {
        jButton6ActionPerformed(null);
        txuserID.setText(String.valueOf(userEditted));
        LabelAddUSer.setText("EDIT USER");
        String qry = "select a.username,a.first_name,"
                + "a.last_name,b.name as roles,"
                + "a.email,a.company_name,a.phone,a.address"
                + "  from user a "
                + " left join roles b on a.roles_id=b.id where a.id=" + txuserID.getText();
        common.functionCommon fc = new common.functionCommon();
        try {
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                txInUserName.setText(rs.getString("username"));
                txFirstName.setText(rs.getString("first_name"));
                txLAstNAme.setText(rs.getString("last_name"));
                cbRoles.setSelectedItem(rs.getString("roles"));
                txEmail.setText(rs.getString("email"));
                phone.setText(rs.getString("phone"));
                address.setText(rs.getString("address"));
                companyName.setText(rs.getString("company_name"));
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error in edit User " + ex.getMessage());
            }
        }
        txInUserName.setEditable(false);
    }
    
    
    
    public void prepareEditProjects (JTable table) {
        closeAllInternalFrame();
        projectDetailFrame.setVisible(true);
        txProjectid.setText(table.getValueAt(table.getSelectedRow(), 0).toString());
        common.functionCommon fc = new common.functionCommon();
        getDataClientAndLEader();
        try {
            String qry = "select title,description,location"
                    + ",leader_id,client_id,status,starts_on"
                    + ",due_date "
                    + " from projects where id = "+txProjectid.getText();
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                txProjectNAme.setText(rs.getString("title"));
                projectDescription.setText(rs.getString("description"));
                cbLeaderinProject.setSelectedIndex(fc.getIndexComboBox(leaderMap  ,rs.getString("leader_id")));
                cbClientinProject.setSelectedIndex(fc.getIndexComboBox(clientMap  ,rs.getString("client_id")));
                txLocation.setText(rs.getString("location"));
                prjStatus.setSelectedIndex(rs.getInt("status"));
            }
        } catch (Exception ex) {
            if (fc.isDebugging)
                System.out.println(" weeoorror in prepareEditProjects "+ex.getMessage());
        }
        
    }

    public void prepareEditProduct(JTable table) {
        jButton9ActionPerformed(null);
        jButton19.setVisible(true);
        txProductsID.setText(table.getValueAt(table.getSelectedRow(), 0).toString());
        LabelAddProducts.setText("EDIT PRODUCT");
        String qry = "select a.name,a.description,a.sku,a.quantity,"
                + "c.price_in from items a "
                + " inner join inventories b on a.id=b.item_id "
                + " inner join inventory_prices c on b.id=c.inventory_id "
                + " where a.id=" + txProductsID.getText();

        common.functionCommon fc = new common.functionCommon();
        if (fc.isDebugging) {
            System.out.println(" qry = " + qry);
        }
        try {
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                txItemName.setText(rs.getString("name"));
                txSKU.setText(rs.getString("sku"));
                txQTY.setText(fc.digitNumber(rs.getString("quantity")));
                txDescription.setText(rs.getString("description"));
                txPrice.setText(fc.digitNumber(rs.getString("price_in")));
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error in prepareEditProduct " + ex.getMessage());
            }
        }
        txInUserName.setEditable(false);
    }
    private void tbUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbUserMouseClicked
        if (evt.getClickCount() == 2) {
            prepareEditUSer(tbUser.getValueAt(tbUser.getSelectedRow(), 0).toString());
        }
    }//GEN-LAST:event_tbUserMouseClicked

    private void tbUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbUserKeyReleased
        if (evt.getKeyCode() == evt.VK_DELETE) {
            dropDataUSer(tbUser);
        }
    }//GEN-LAST:event_tbUserKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        closeAllInternalFrame();
        disableALlButtonHeader();
        jButton4MouseEntered(null);
        productsFrame.setVisible(true);
        viewProducts();
    }//GEN-LAST:event_jButton4ActionPerformed

    void clearProductEditForm() {
        txItemName.setText("");
        txSKU.setText("");
        txQTY.setText("0");
        txDescription.setText("");
        txPrice.setText("0");
        txInUserName.setEditable(true);
        txProductsID.setText("");;
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        closeAllInternalFrame();
        jButton19.setVisible(false);
        productEditFrame.setVisible(true);
        LabelAddProducts.setText("ADD PRODUCT");
//        common.functionCommon fc = new common.functionCommon();
//        cbCategory.removeAllItems();
//        try {
//            String qry = "select id,name from inventory_categories order by name ";
//            if (role_id != 0) {
//                qry += " where id!=0";
//            }
//            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
//            Statement st = cn.createStatement();
//            ResultSet rs = st.executeQuery(qry);
//            cbRoles.removeAllItems();
//            while (rs.next()) {
//                cbCategory.addItem(rs.getString("name"));
//            }
//            st.close();
//            cn.close();
//        } catch (Exception ex) {
//            if (fc.isDebugging) {
//                System.out.println("error in jButton6ActionPerformed " + ex.getMessage());
//            }
//        }
        clearProductEditForm();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void tbProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbProductMouseClicked
        if (evt.getClickCount() == 2) {
            prepareEditProduct(tbProduct);
        }
    }//GEN-LAST:event_tbProductMouseClicked

    private void tbProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbProductKeyReleased
        if (evt.getKeyCode() == evt.VK_DELETE) {
            dropDataProduct(tbProduct);
        }
    }//GEN-LAST:event_tbProductKeyReleased

    private void btFirstProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFirstProductActionPerformed
        txPageProduct.setText("1");
        viewProducts();
    }//GEN-LAST:event_btFirstProductActionPerformed

    private void btPreviousProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousProductActionPerformed
        txPageProduct.setText(String.valueOf(Integer.valueOf(txPageProduct.getText()) - 1));
        viewProducts();
    }//GEN-LAST:event_btPreviousProductActionPerformed

    private void txPageProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPageProductKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (txPageProduct.getText().length() > 0) {
                common.functionCommon cf = new common.functionCommon();
                if (!cf.isNumeric(txPageProduct.getText())) {
                    txPageProduct.setText("1");
                }
            } else {
                txPageProduct.setText("1");
            }
            viewProducts();
        }
    }//GEN-LAST:event_txPageProductKeyReleased

    private void btNextProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextProductActionPerformed
        txPageProduct.setText(String.valueOf(Integer.valueOf(txPageProduct.getText()) + 1));
        viewProducts();
    }//GEN-LAST:event_btNextProductActionPerformed

    private void btLastProductLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLastProductLastActionPerformed
        txPageProduct.setText(String.valueOf(lastPageProducts));
        viewProducts();
    }//GEN-LAST:event_btLastProductLastActionPerformed

    private void txItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txItemNameKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txSKU.requestFocus();
        }
    }//GEN-LAST:event_txItemNameKeyReleased

    private void txSKUKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSKUKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txQTY.requestFocus();
        }
    }//GEN-LAST:event_txSKUKeyReleased

    private void txQTYKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txQTYKeyReleased
        common.functionCommon fc = new common.functionCommon();
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txDescription.requestFocus();
        } else {
            try {
                Integer.valueOf(txQTY.getText().replace(".", ""));
                if (txQTY.getText().charAt(0) == '0' && txQTY.getText().length() > 1) {
                    txQTY.setText(String.valueOf(txQTY.getText().charAt(1)));
                }
                txQTY.setText(fc.digitNumber(txQTY.getText().replace(".", "")));
            } catch (Exception ex) {
                txQTY.setText("0");
            }
        }
    }//GEN-LAST:event_txQTYKeyReleased

    private void txPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPriceKeyReleased
        common.functionCommon fc = new common.functionCommon();
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jButton10.requestFocus();
        } else {
            try {
                Integer.valueOf(txPrice.getText().replace(".", ""));
                if (txPrice.getText().charAt(0) == '0' && txPrice.getText().length() > 1) {
                    txPrice.setText(String.valueOf(txPrice.getText().charAt(1)));
                }
                txPrice.setText(fc.digitNumber(txPrice.getText().replace(".", "")));
            } catch (Exception ex) {
                txPrice.setText("0");
            }
        }
    }//GEN-LAST:event_txPriceKeyReleased

    int getIdCategoryItemFromName(String str) {
        int getBack = 100;
        common.functionCommon fc = new common.functionCommon();
        try {
            String qry = "select id from inventory_categories  where name ='" + str + "'";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            while (rs.next()) {
                getBack = rs.getInt("id");
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error in getIdCategoryItemFromName " + ex.getMessage());
            }
        }
        return getBack;
    }

    boolean isItemAlreadyExist(String str, String idTable) {
        common.functionCommon fc = new common.functionCommon();
        boolean getBack = false;
        try {
            String qry = "select id from items where name='" + str + "'";
            if (idTable.length() > 0) {
                qry += " and id != " + idTable;
            }
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                getBack = true;
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error isItemAlreadyExist " + ex.getMessage());
            }
        }
        return getBack;
    }

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        common.functionCommon fc = new common.functionCommon();
        boolean canAccess = true;
        if (txItemName.getText().length() < 1) {
            txItemName.requestFocus();
            canAccess = false;
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter Item", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);

        } else if (txSKU.getText().length() < 1) {
            txSKU.requestFocus();
            canAccess = false;
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter SKU", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);

        } else if (txQTY.getText().length() < 1 && canAccess) {
            txQTY.requestFocus();
            canAccess = false;
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter Quantity", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);

        } else if (txPrice.getText().length() < 1 && canAccess) {
            txPrice.requestFocus();
            canAccess = false;
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter Price", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);

        }
        if (canAccess && txItemName.getText().length() > 0 && txProductsID.getText().length() < 1) {
            if (isItemAlreadyExist(txItemName.getText(), "")) {
                txItemName.requestFocus();
                canAccess = false;
                javax.swing.JOptionPane.showConfirmDialog(null, "This item already exist", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            }
        }
        if (canAccess && txItemName.getText().length() > 0 && txProductsID.getText().length() > 0) {
            if (isItemAlreadyExist(txItemName.getText(), txProductsID.getText())) {
                txItemName.requestFocus();
                canAccess = false;
                javax.swing.JOptionPane.showConfirmDialog(null, "This item already exist", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            }
        }
        if (canAccess) {
            try {
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                int qtyThis = 0;
                if (fc.isNumeric(txQTY.getText().replace(".", ""))) {
                    qtyThis = Integer.valueOf(txQTY.getText().replace(".", ""));
                }
                int priceThis = 0;
                if (fc.isNumeric(txPrice.getText().replace(".", ""))) {
                    priceThis = Integer.valueOf(txPrice.getText().replace(".", ""));
                }
                String qry = "";
                if (txProductsID.getText().length() < 1) {
                    qry = "insert into items (name"
                            + ",description,quantity,sku"
                            + ",created_at,modified_at) values (?,?,?,?,now(),now())";
                    PreparedStatement psInsert = cn.prepareStatement(qry);
                    psInsert.setString(1, txItemName.getText());
                    psInsert.setString(2, txDescription.getText());
                    psInsert.setInt(3, qtyThis);
                    psInsert.setString(4, txSKU.getText());
                    psInsert.executeUpdate();
                    PreparedStatement psIdentity = cn.prepareStatement("CALL IDENTITY()");
                    ResultSet result = psIdentity.executeQuery();
                    result.next();
                    int item_ID = result.getInt(1);
                    psInsert.close();
                    psIdentity.close();
                    result.close();

                    qry = "insert into inventories (item_id"
                            + ",stock_in,stock_out"
                            + ",created_at,modified_at) values (?,0,0,now(),now())";
                    psInsert = cn.prepareStatement(qry);
                    psInsert.setInt(1, item_ID);
                    psInsert.executeUpdate();
                    psIdentity = cn.prepareStatement("CALL IDENTITY()");
                    result = psIdentity.executeQuery();
                    result.next();
                    int inventory_id = result.getInt(1);
                    psInsert.close();
                    psIdentity.close();
                    result.close();

                    qry = "insert into inventory_prices (inventory_id"
                            + ",price_in,price_out) values (?,?,0)";
                    psInsert = cn.prepareStatement(qry);
                    psInsert.setInt(1, inventory_id);
                    psInsert.setInt(2, priceThis);
                    psInsert.executeUpdate();
                    psInsert.close();
                } else {
                    qry = "update items set name='" + txItemName.getText() + "' "
                            + ",description= '" + txDescription.getText() + "' "
                            + ",quantity= " + qtyThis + ""
                            + ",modified_at=now() "
                            + ",sku='" + txSKU.getText() + "' "
                            //+ ",category_id= " + getIdCategoryItemFromName(cbCategory.getSelectedItem().toString()) + ""
                            + "  where id = " + txProductsID.getText();
                    st.executeUpdate(qry);
                    qry = "update inventories set modified_at = now() where item_id= " + txProductsID.getText();
                    st.executeUpdate(qry);
                    qry = "update inventory_prices set price_in = " + priceThis + " "
                            + " where inventory_id in (select id from inventories where item_id= " + txProductsID.getText() + ")";
                    st.executeUpdate(qry);

                    st.close();
                }
                if (fc.isDebugging) {
                    System.out.println(" qry = " + qry);
                }


                cn.close();

            } catch (Exception ex) {
                System.out.println(" error in jButton10ActionPerformed " + ex.getMessage());
            }
            if (txProductsID.getText().length() > 0) {
                jButton11ActionPerformed(null);
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        closeAllInternalFrame();
        productsFrame.setVisible(true);
        viewProducts();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void txDescriptionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txDescriptionKeyReleased
        if (evt.getKeyCode() == evt.VK_TAB) {
            txPrice.requestFocus();
            txDescription.setText(txDescription.getText().substring(0, (txDescription.getText().length() - 1)));
        }
    }//GEN-LAST:event_txDescriptionKeyReleased

    private void searchProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchProductKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (Integer.valueOf(txPageProduct.getText()) > 1) {
                txPageProduct.setText("1");
            }
            viewProducts();
        }
    }//GEN-LAST:event_searchProductKeyReleased

    private void searchProductFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProductFocusGained
        searchProduct.selectAll();
    }//GEN-LAST:event_searchProductFocusGained

    private void searchProductFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProductFocusLost
        if (searchProduct.getText().length() < 1) {
            searchProduct.setText("Search");
        }
    }//GEN-LAST:event_searchProductFocusLost

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        closeAllInternalFrame();
        projectDetailFrame.setVisible(true);
        viewProjectDetailEmpty();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void txProjectNAmeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txProjectNAmeFocusGained
        if (txProjectNAme.getText().equalsIgnoreCase("PROJECT NAME")) {
            txProjectNAme.setText("");
        }
        txProjectNAme.selectAll();
    }//GEN-LAST:event_txProjectNAmeFocusGained

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        common.functionCommon fc = new common.functionCommon();
        try {
            Date dateNow = (Date) sdf.parse(txStartProject.getText());
            dateChooserDialog1.setSelection(new datechooser.model.multiple.PeriodSet(new datechooser.model.multiple.Period(new java.util.GregorianCalendar((1900 + dateNow.getYear()), dateNow.getMonth(), dateNow.getDate()),
                    new java.util.GregorianCalendar((1900 + dateNow.getYear()), dateNow.getMonth(), dateNow.getDate()))));
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error in jButton15ActionPerformed " + ex.getMessage());
            }
        }
        dateChooserDialog1.showDialog(null, true);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void dateChooserDialog1OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserDialog1OnSelectionChange
        if (dateChooserDialog1.getSelectedDate() != null) {
            txStartProject.setText(sdf.format(dateChooserDialog1.getSelectedDate().getTime()));
        }
    }//GEN-LAST:event_dateChooserDialog1OnSelectionChange

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        common.functionCommon fc = new common.functionCommon();
        try {
            Date dateNow = (Date) sdf.parse(txDuedate.getText());
            dateChooserDialog2.setSelection(new datechooser.model.multiple.PeriodSet(new datechooser.model.multiple.Period(new java.util.GregorianCalendar((1900 + dateNow.getYear()), dateNow.getMonth(), dateNow.getDate()),
                    new java.util.GregorianCalendar((1900 + dateNow.getYear()), dateNow.getMonth(), dateNow.getDate()))));
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error in jButton16ActionPerformed " + ex.getMessage());
            }
        }
        dateChooserDialog2.showDialog(null, true);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void dateChooserDialog2OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserDialog2OnSelectionChange
        if (dateChooserDialog2.getSelectedDate() != null) {
            txDuedate.setText(sdf.format(dateChooserDialog2.getSelectedDate().getTime()));
        }
    }//GEN-LAST:event_dateChooserDialog2OnSelectionChange

    private void txSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSearchKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (Integer.valueOf(txPage.getText()) > 1) {
                txPage.setText("1");
            }
            viewUser();
        }
    }//GEN-LAST:event_txSearchKeyReleased

    private void txPageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPageFocusLost
        if (txPage.getText().length() > 0) {
            common.functionCommon cf = new common.functionCommon();
            if (!cf.isNumeric(txPage.getText())) {
                txPage.setText("1");
            }
        } else {
            txPage.setText("1");
        }
    }//GEN-LAST:event_txPageFocusLost

    private void txPageProductFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPageProductFocusLost
        if (txPageProduct.getText().length() > 0) {
            common.functionCommon cf = new common.functionCommon();
            if (!cf.isNumeric(txPageProduct.getText())) {
                txPageProduct.setText("1");
            }
        } else {
            txPageProduct.setText("1");
        }
    }//GEN-LAST:event_txPageProductFocusLost

    private void txSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txSearchFocusGained
        txSearch.selectAll();
    }//GEN-LAST:event_txSearchFocusGained

    private void txSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txSearchFocusLost
        if (txSearch.getText().length() < 1) {
            txSearch.setText("Search");
        }
    }//GEN-LAST:event_txSearchFocusLost

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        menuPop.show(jButton18, -80, 50);
        showMenuUser = true;
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        POPUpMenuUsuallycommand();
        prepareEditUSer(String.valueOf(userID));
        btLeftUSer.setVisible(false);
        btLeftRoles.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        POPUpMenuUsuallycommand();
        loginForm lf = new loginForm();
        lf.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        POPUpMenuUsuallycommand();
        formWindowClosing(null);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        ProductPopMenu.show(jButton19, 0, 30);
        showMenuProduct = true;
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (javax.swing.JOptionPane.showConfirmDialog(null, "Delete this Inventory?", "Question",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            common.functionCommon fc = new common.functionCommon();
            try {
                String qry = "";
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                
                qry = "delete from inventory_prices where inventory_id in "
                        + "(select id from inventories where item_id in "
                        + "(select id from items where id in (" + txProductsID.getText() + ")))";
                System.out.println("qry 1 " + qry);
                st.executeUpdate(qry);
                qry = "delete from inventories where item_id in "
                        + "(select id from items where id in (" + txProductsID.getText() + "))";
                System.out.println("qry 2 " + qry);
                st.executeUpdate(qry);

                qry = "delete from items where id in (" + txProductsID.getText() + ");";
                if (fc.isDebugging) {
                    System.out.println(" qry delete inventory = " + qry);
                }
                st.executeUpdate(qry);
                
                
                
                
                st.close();
                cn.close();
                jButton11ActionPerformed(null);
                viewProducts();
            } catch (Exception ex) {
                if (fc.isDebugging) {
                    System.out.println(" error in delete inventory " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void txProjectNAmeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txProjectNAmeFocusLost
        if (txProjectNAme.getText().length() < 1) {
            txProjectNAme.setText("PROJECT NAME");
        }
    }//GEN-LAST:event_txProjectNAmeFocusLost

    private void lbFirstnameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbFirstnameMouseExited
        if ((showMenuUser && evt.getPoint().y < 0)
                || (showMenuUser
                && (evt.getPoint().x < 80 || evt.getPoint().x > 149))) {
            menuPop.setVisible(false);
            showMenuUser = false;
        }
    }//GEN-LAST:event_lbFirstnameMouseExited

    private void menuPopMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuPopMouseExited
        if ((showMenuUser && (evt.getX() < 0 || evt.getX() > 99))
                || (showMenuUser && (evt.getY() < 0 || evt.getY() > 59))) {
            menuPop.setVisible(false);
            showMenuUser = false;
        }
    }//GEN-LAST:event_menuPopMouseExited

    private void lbFirstnameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbFirstnameMouseClicked
        menuPop.show(jButton18, -80, 50);
        showMenuUser = true;
    }//GEN-LAST:event_lbFirstnameMouseClicked

    private void jButton18MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton18MouseMoved
        if (!showMenuUser) {
            menuPop.show(jButton18, -80, 50);
            showMenuUser = true;
        }
    }//GEN-LAST:event_jButton18MouseMoved

    private void jButton18MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton18MouseExited
        if ((showMenuUser && evt.getY() < 0)
                || (showMenuUser
                && evt.getX() > 19)) {
            menuPop.setVisible(false);
            showMenuUser = false;
        }
    }//GEN-LAST:event_jButton18MouseExited

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        closeAllInternalFrame();
        disableALlButtonHeader();
        jButton12MouseEntered(null);
        financeFrame.setVisible(true);
        btLeftUSer.setVisible(true);
        btLeftUSer.setText("TRANSACTIONS");
        btLeftRoles.setVisible(true);
        btLeftRoles.setText("ACCOUNTS");
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseExited
        if (!productsFrame.isVisible()
                && !productEditFrame.isVisible()) {
            jButton4.setOpaque(false);
            jButton4.setForeground(Color.WHITE);
        }

    }//GEN-LAST:event_jButton4MouseExited

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
        if (!productsFrame.isVisible()
                && !productEditFrame.isVisible()) {
            jButton4.setOpaque(true);
            jButton4.setBackground(Color.WHITE);
            jButton4.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jButton4MouseEntered

    void disableALlButtonHeader() {
        jButton4.setOpaque(false);
        jButton4.setForeground(Color.WHITE);
        jButton3.setOpaque(false);
        jButton3.setForeground(Color.WHITE);
        jButton12.setOpaque(false);
        jButton12.setForeground(Color.WHITE);
        jButton1.setOpaque(false);
        jButton1.setForeground(Color.WHITE);
    }

    void disableButtonLeft() {
        btLeftRoles.setBackground(new java.awt.Color(192, 192, 192));
    }

    private void lbFirstnameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbFirstnameMouseEntered
        if (!showMenuUser) {
            menuPop.show(jButton18, -80, 50);
            showMenuUser = true;
        }
    }//GEN-LAST:event_lbFirstnameMouseEntered

    private void jButton18MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton18MouseEntered
        if (!showMenuUser) {
            menuPop.show(jButton18, -80, 50);
            showMenuUser = true;
        }
    }//GEN-LAST:event_jButton18MouseEntered

    private void jButton18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton18MouseClicked
        lbFirstnameMouseClicked(null);
    }//GEN-LAST:event_jButton18MouseClicked

    private void jButton3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseEntered
        if (!projectFrame.isVisible() && !projectDetailFrame.isVisible()) {
            jButton3.setOpaque(true);
            jButton3.setBackground(Color.WHITE);
            jButton3.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jButton3MouseEntered

    private void jButton3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseExited
        if (!projectFrame.isVisible() && !projectDetailFrame.isVisible()) {
            jButton3.setOpaque(false);
            jButton3.setForeground(Color.WHITE);
        }
    }//GEN-LAST:event_jButton3MouseExited

    private void jButton12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseEntered
        if (!financeFrame.isVisible()
                && !accountsFrame.isVisible()) {
            jButton12.setOpaque(true);
            jButton12.setBackground(Color.WHITE);
            jButton12.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jButton12MouseEntered

    private void jButton12MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseExited
        if (!financeFrame.isVisible()
                && !accountsFrame.isVisible()) {
            jButton12.setOpaque(false);
            jButton12.setForeground(Color.WHITE);
        }
    }//GEN-LAST:event_jButton12MouseExited

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        if (!userFrame.isVisible() && !userEditFrame.isVisible()) {
            jButton1.setOpaque(true);
            jButton1.setBackground(Color.WHITE);
            jButton1.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        if (!userFrame.isVisible() && !userEditFrame.isVisible()) {
            jButton1.setOpaque(false);
            jButton1.setForeground(Color.WHITE);
        }
    }//GEN-LAST:event_jButton1MouseExited

    private void btLeftRolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLeftRolesActionPerformed

        if (btLeftRoles.getText().equalsIgnoreCase("ACCOUNTS")) {
            disableButtonLeft();
            btLeftRolesMouseEntered(null);
            accountsFrame.setVisible(true);
            viewAccounts();
        }
    }//GEN-LAST:event_btLeftRolesActionPerformed

    private void btLeftRolesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btLeftRolesMouseEntered
        if (!accountsFrame.isVisible()) {
            btLeftRoles.setBackground(new java.awt.Color(153, 153, 255));
        }
    }//GEN-LAST:event_btLeftRolesMouseEntered

    private void btLeftRolesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btLeftRolesMouseExited
        if (!accountsFrame.isVisible()) {
            btLeftRoles.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_btLeftRolesMouseExited

    private void searchProduct1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProduct1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_searchProduct1FocusGained

    private void searchProduct1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProduct1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_searchProduct1FocusLost

    private void searchProduct1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchProduct1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_searchProduct1KeyReleased

    private void accNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accNameKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (acc.getText().length() > 0 && acc.getText().length() > 0) {
                jButton20ActionPerformed(null);
            }
        }
    }//GEN-LAST:event_accNameKeyReleased

    private void accKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            accName.requestFocus();
        }
    }//GEN-LAST:event_accKeyReleased

    private boolean isACCExist(String idUnique) {
        boolean getBack = false;
        common.functionCommon fc = new common.functionCommon();
        try {
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            String qry = "select count(*) as total from accounts where unique_id = '" + idUnique + "' ";
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                if (rs.getInt("total") > 0) {
                    getBack = true;
                }
            }
            cn.close();
            viewAccounts();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println(" error in add acconts " + ex.getMessage());
            }
        }
        return getBack;
    }
    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        if (acc.getText().length() < 1
                || acc.getText().equalsIgnoreCase("ACC#")) {
            acc.requestFocus();
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter Account ID", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);
        } else if (accName.getText().length() < 1
                || acc.getText().equalsIgnoreCase("Account Name")) {
            accName.requestFocus();
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter Account Name", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);
        } else {
            if (isACCExist(acc.getText())) {
                javax.swing.JOptionPane.showConfirmDialog(null, "Account id already exist", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            } else {
                common.functionCommon fc = new common.functionCommon();
                try {
                    Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                    Statement st = cn.createStatement();
                    String qry = "insert into accounts (unique_id,name) "
                            + "values ('" + acc.getText() + "','" + accName.getText() + "')";
                    st.executeUpdate(qry);
                    cn.close();
                    accName.setText("");
                    acc.requestFocus();
                    acc.setText("");
                    viewAccounts();
                } catch (Exception ex) {
                    if (fc.isDebugging) {
                        System.out.println(" error in add acconts " + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    private void accFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_accFocusGained
        if (acc.getText().equalsIgnoreCase("ACC#")) {
            acc.setText("");
            acc.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_accFocusGained

    private void accFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_accFocusLost
        if (acc.getText().length() < 1) {
            acc.setText("ACC#");
            acc.setForeground(new java.awt.Color(204, 204, 204));
        }
    }//GEN-LAST:event_accFocusLost

    private void accNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_accNameFocusGained
        if (accName.getText().equalsIgnoreCase("Account Name")) {
            accName.setText("");
            accName.setForeground(Color.BLACK);
        }

    }//GEN-LAST:event_accNameFocusGained

    private void accNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_accNameFocusLost
        if (accName.getText().length() < 1) {
            accName.setText("Account Name");
            accName.setForeground(new java.awt.Color(204, 204, 204));
        }
    }//GEN-LAST:event_accNameFocusLost

    private void tbAccountsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAccountsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbAccountsMouseClicked

    private void tbAccountsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbAccountsKeyReleased
        if (evt.getKeyCode() == evt.VK_DELETE) {
            deleteAccounts(tbAccounts);
        }
    }//GEN-LAST:event_tbAccountsKeyReleased

    private void btFirstAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFirstAccountsActionPerformed
        txPageAccounts.setText("1");
        viewAccounts();
    }//GEN-LAST:event_btFirstAccountsActionPerformed

    private void btPreviousAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousAccountsActionPerformed
        txPageAccounts.setText(String.valueOf(Integer.valueOf(txPageAccounts.getText()) - 1));
        viewAccounts();
    }//GEN-LAST:event_btPreviousAccountsActionPerformed

    private void txPageAccountsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPageAccountsFocusLost
        if (txPageAccounts.getText().length() > 0) {
            common.functionCommon cf = new common.functionCommon();
            if (!cf.isNumeric(txPageAccounts.getText())) {
                txPageAccounts.setText("1");
            }
        } else {
            txPageAccounts.setText("1");
        }
    }//GEN-LAST:event_txPageAccountsFocusLost

    private void txPageAccountsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPageAccountsKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (txPageAccounts.getText().length() > 0) {
                common.functionCommon cf = new common.functionCommon();
                if (!cf.isNumeric(txPageAccounts.getText())) {
                    txPageAccounts.setText("1");
                }
            } else {
                txPageAccounts.setText("1");
            }
            viewAccounts();
        }
    }//GEN-LAST:event_txPageAccountsKeyReleased

    private void btNextAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextAccountsActionPerformed
        txPageAccounts.setText(String.valueOf(Integer.valueOf(txPageAccounts.getText()) + 1));
        viewAccounts();
    }//GEN-LAST:event_btNextAccountsActionPerformed

    private void btLastAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLastAccountsActionPerformed
        txPageAccounts.setText(String.valueOf(lastPageAccounts));
        viewAccounts();
    }//GEN-LAST:event_btLastAccountsActionPerformed

    private void searchProduct2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProduct2FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_searchProduct2FocusGained

    private void searchProduct2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProduct2FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_searchProduct2FocusLost

    private void searchProduct2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchProduct2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_searchProduct2KeyReleased

    private void tbTransactionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTransactionsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbTransactionsMouseClicked

    private void tbTransactionsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbTransactionsKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tbTransactionsKeyReleased

    private void btFirstTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFirstTransactionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btFirstTransactionsActionPerformed

    private void btPreviousTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousTransactionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btPreviousTransactionsActionPerformed

    private void txPageTransactionsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPageTransactionsFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txPageTransactionsFocusLost

    private void txPageTransactionsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPageTransactionsKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txPageTransactionsKeyReleased

    private void btNextTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextTransactionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btNextTransactionsActionPerformed

    private void btLastTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLastTransactionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btLastTransactionsActionPerformed

    private void txLocationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txLocationKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txLocationKeyReleased
    void countGrandTotalAndTotal() {
        int total = 0;
        total+=Integer.valueOf(txMaterial.getText().replace(".", ""));
        total+=Integer.valueOf(txPeralatan.getText().replace(".", ""));
        total+=Integer.valueOf(txTenagaKErja.getText().replace(".", ""));
        total+=Integer.valueOf(txOverHEadeCost.getText().replace(".", ""));
        total+=Integer.valueOf(txManagementCost.getText().replace(".", ""));
        common.functionCommon fc = new common.functionCommon();
        lbTotal.setText(fc.digitNumber(String.valueOf(total)));
        int countDiscount = total *(Integer.valueOf(txPPN.getText()))/100;
        System.out.println("countDiscount = "+countDiscount);
        total-=countDiscount;
        System.out.println("total = "+total);
        lbGrandTotal.setText(fc.digitNumber(String.valueOf(total)));
    }
    private void txMaterialKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txMaterialKeyReleased
        common.functionCommon fc = new common.functionCommon();
        fc.setNumericPointinTextField(txMaterial, evt);
        countGrandTotalAndTotal();
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txPeralatan.requestFocus();
        }
    }//GEN-LAST:event_txMaterialKeyReleased

    private void txPeralatanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPeralatanKeyReleased
        common.functionCommon fc = new common.functionCommon();
        fc.setNumericPointinTextField(txPeralatan, evt);
        countGrandTotalAndTotal();
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txTenagaKErja.requestFocus();
        }
    }//GEN-LAST:event_txPeralatanKeyReleased

    private void txTenagaKErjaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txTenagaKErjaKeyReleased
        common.functionCommon fc = new common.functionCommon();
        fc.setNumericPointinTextField(txTenagaKErja, evt);
        countGrandTotalAndTotal();
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txOverHEadeCost.requestFocus();
        }
    }//GEN-LAST:event_txTenagaKErjaKeyReleased

    private void txOverHEadeCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txOverHEadeCostKeyReleased
        common.functionCommon fc = new common.functionCommon();
        fc.setNumericPointinTextField(txOverHEadeCost, evt);
        countGrandTotalAndTotal();
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txManagementCost.requestFocus();
        }
    }//GEN-LAST:event_txOverHEadeCostKeyReleased

    private void txManagementCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txManagementCostKeyReleased
        common.functionCommon fc = new common.functionCommon();
        fc.setNumericPointinTextField(txManagementCost, evt);
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txPPN.requestFocus();
        }
    }//GEN-LAST:event_txManagementCostKeyReleased

    private void txPPNKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPPNKeyReleased
        common.functionCommon fc = new common.functionCommon();
        fc.setNumericPointinTextField(txPPN, evt);
        countGrandTotalAndTotal();
        if (Integer.valueOf(txPPN.getText().replace(".", "")) > 100) {
            txPPN.setText("100");
        }
    }//GEN-LAST:event_txPPNKeyReleased

    private void txQTYProductsinProjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txQTYProductsinProjectKeyReleased
        common.functionCommon fc = new common.functionCommon();
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jButton2ActionPerformed(null);
        } else {
            try {
                Integer.valueOf(txQTYProductsinProject.getText().replace(".", ""));
                if (txQTYProductsinProject.getText().charAt(0) == '0'
                        && txQTYProductsinProject.getText().length() > 1) {
                    txQTYProductsinProject.setText(
                            String.valueOf(txQTYProductsinProject.getText().charAt(1)));
                }
                txQTYProductsinProject.setText(fc.digitNumber(
                        txQTYProductsinProject.getText().replace(".", "")));
            } catch (Exception ex) {
                txQTYProductsinProject.setText("0");
            }
        }
    }//GEN-LAST:event_txQTYProductsinProjectKeyReleased

    void refreshTablePeopleINProject() {
        common.functionCommon fc = new common.functionCommon();
        try {
            String qry = "select id_people,people_name from cache_people_in_project "
                    + " where id_user=" + String.valueOf(userID)
                    + "  order by people_name ";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            java.util.Vector rowData = null;
            vectorPeopleInProject = new java.util.Vector();
            while (rs.next()) {
                rowData = new java.util.Vector();
                rowData.addElement(rs.getInt("id_people"));
                rowData.addElement("<html>" + rs.getString("people_name")
                        + "<font color=#6D7B8D> - Programmer</font></html>");
                rowData.addElement("");
                vectorPeopleInProject.addElement(rowData);
            }
            tbPeopleinProject.tableChanged(new javax.swing.event.TableModelEvent(tmTabelPeopleInProject));
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println(" error in refreshTableProductInProject " + ex.getMessage());
            }
        }
    }

    private void refreshTableProductInProject() {
        common.functionCommon fc = new common.functionCommon();
        try {
            String qry = "select id,name,qty from cache_products_in_project where user_id=" + String.valueOf(userID)
                    + " order by name ";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            java.util.Vector rowData = null;
            vectorProductsInProject = new java.util.Vector();
            while (rs.next()) {
                rowData = new java.util.Vector();
                rowData.addElement(rs.getInt("id"));
                rowData.addElement("<html>" + rs.getString("name") + "<font color=#6D7B8D> - "
                        + fc.digitNumber(rs.getString("qty")) + "</font></html>");
                rowData.addElement("");
                vectorProductsInProject.addElement(rowData);
            }
            tbProductInProjects.tableChanged(new javax.swing.event.TableModelEvent(tmTableProductsInProject));
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println(" error in refreshTableProductInProject " + ex.getMessage());
            }
        }
    }

    void refreshcbProductsInProject() {
        common.functionCommon fc = new common.functionCommon();
        cbProductsInProject.removeAllItems();
        try {
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            String qry = "select id,name from items where "
                    + "id not in (select id from cache_products_in_project where user_id=" + userID + ") "
                    + "order by name";
            ResultSet rs = st.executeQuery(qry);
            cbProductsInProject.addItem(addJcomboBoxItemWithDuplicate("Select Product", cbProductsInProject));
            productMap.put(cbProductsInProject.getItemCount() - 1, "");
            cbProductsInProject.setSelectedIndex(0);
            while (rs.next()) {
                cbProductsInProject.addItem(addJcomboBoxItemWithDuplicate(
                        rs.getString("name"), cbProductsInProject));
                productMap.put(cbProductsInProject.getItemCount() - 1, rs.getInt("id"));
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println(" error in refreshcbProductsInProject " + ex.getMessage());
            }
        }
    }

    void refreshcbPeopleInProject() {
        common.functionCommon fc = new common.functionCommon();
        cbPeopleInProject.removeAllItems();
        try {
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            String qry = qry = "select id,first_name,last_name from user "
                    + "where first_name is not null and first_name<>'' "
                    + "and last_name is not null and last_name<>'' "
                    + " and id not in (select id_people from cache_people_in_project)"
                    + "order by first_name";
            ResultSet rs = st.executeQuery(qry);
            cbPeopleInProject.addItem(addJcomboBoxItemWithDuplicate("Select People", cbPeopleInProject));
            peopleInProjectMap.put(cbPeopleInProject.getItemCount() - 1, "");
            cbPeopleInProject.setSelectedIndex(0);
            while (rs.next()) {
                cbPeopleInProject.addItem(addJcomboBoxItemWithDuplicate(
                        rs.getString("first_name") + " "
                        + rs.getString("last_name"), cbPeopleInProject));
                peopleInProjectMap.put(cbPeopleInProject.getItemCount() - 1, rs.getInt("id"));
            }
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println(" error in refreshcbProductsInProject " + ex.getMessage());
            }
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        boolean canSave = true;
        if (canSave && productMap.get(cbProductsInProject.getSelectedIndex()).toString().length() < 1) {
            canSave = false;
            cbProductsInProject.requestFocus();
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter product", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);
        }
        if (canSave && txQTYProductsinProject.getText().length() < 1) {
            canSave = false;
            txQTYProductsinProject.requestFocus();
            javax.swing.JOptionPane.showConfirmDialog(null, "Enter quantity", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);
        } else if (canSave) {
            if (Integer.valueOf(txQTYProductsinProject.getText().replace(".", "")) < 1) {
                canSave = false;
                txQTYProductsinProject.requestFocus();
                javax.swing.JOptionPane.showConfirmDialog(null, "Quantity is 0", "Information",
                        javax.swing.JOptionPane.PLAIN_MESSAGE);
            }
        }

        if (canSave) {
            common.functionCommon fc = new common.functionCommon();
            try {
                String qry = "insert into cache_products_in_project (id,user_id,name,qty) values ("
                        + productMap.get(cbProductsInProject.getSelectedIndex()) + ","
                        + String.valueOf(userID)
                        + ",'" + cbProductsInProject.getSelectedItem() + "',"
                        + txQTYProductsinProject.getText().replace(".", "") + ");";
                if (fc.isDebugging) {
                    System.out.println("jButton2ActionPerformed qry  " + qry);
                }
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                st.executeUpdate(qry);
                st.close();
                cn.close();
                refreshcbProductsInProject();
                refreshTableProductInProject();
                txQTYProductsinProject.setText("0");
            } catch (Exception ex) {
                if (fc.isDebugging) {
                    System.out.println(" error in jButton2ActionPerformed " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        common.functionCommon fc = new common.functionCommon();
        boolean canSave = true;
        if (cbPeopleInProject.getSelectedItem().equals("Select People")) {
            canSave = false;
            javax.swing.JOptionPane.showConfirmDialog(null, "Select People", "Information",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);
        }
        if (canSave) {
            try {
                String qry = "insert into cache_people_in_project (id_people,id_user,people_name) values ("
                        + peopleInProjectMap.get(cbPeopleInProject.getSelectedIndex()) + ","
                        + String.valueOf(userID)
                        + ",'" + cbPeopleInProject.getSelectedItem() + "');";
                if (fc.isDebugging) {
                    System.out.println("jButton5ActionPerformed qry  " + qry);
                }
                Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
                Statement st = cn.createStatement();
                st.executeUpdate(qry);
                st.close();
                cn.close();
                refreshTablePeopleINProject();
                refreshcbPeopleInProject();
            } catch (Exception ex) {
                if (fc.isDebugging) {
                    System.out.println(" error in jButton2ActionPerformed " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void projectDescriptionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_projectDescriptionFocusGained
        if (projectDescription.getText().equalsIgnoreCase("Description")) {
            projectDescription.setText("");
        }
        projectDescription.selectAll();
    }//GEN-LAST:event_projectDescriptionFocusGained

    private void projectDescriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_projectDescriptionFocusLost
        if (projectDescription.getText().length() < 1) {
            projectDescription.setText("Description");
        }
    }//GEN-LAST:event_projectDescriptionFocusLost

    private void txStartProjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txStartProjectKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txDuedate.requestFocus();
        }
    }//GEN-LAST:event_txStartProjectKeyReleased

    private void txProjectNAmeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txProjectNAmeKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            projectDescription.requestFocus();
        }
    }//GEN-LAST:event_txProjectNAmeKeyReleased

    private void tbPeopleinProjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPeopleinProjectKeyReleased
        if (evt.getKeyCode() == evt.VK_DELETE) {
            deletePeopleInProject(tbPeopleinProject);
        }
    }//GEN-LAST:event_tbPeopleinProjectKeyReleased

    private void tbProductInProjectsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbProductInProjectsKeyReleased
        if (evt.getKeyCode() == evt.VK_DELETE) {
            deleteProductInProject(tbProductInProjects);
        }
    }//GEN-LAST:event_tbProductInProjectsKeyReleased

    private void jButton19MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton19MouseExited
        System.out.println("exited x = " + evt.getPoint().x + " y = " + evt.getPoint().y);
        if (showMenuProduct) {
            System.out.println(" masih show product");
        }
        if ((showMenuProduct && evt.getPoint().y < 0)
                || (showMenuProduct
                && (evt.getPoint().x < 0 || evt.getPoint().x > 83))) {
            System.out.println(" kosng");
            ProductPopMenu.setVisible(false);
            showMenuProduct = false;
        }
    }//GEN-LAST:event_jButton19MouseExited

    private void jButton19MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton19MouseEntered
        if (!showMenuProduct) {
            ProductPopMenu.show(jButton19, 0, 30);
            showMenuProduct = true;
        }
    }//GEN-LAST:event_jButton19MouseEntered

    private void jButton19MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton19MouseMoved
        System.out.println("moved x = " + evt.getPoint().x + " y = " + evt.getPoint().y);
        if (!showMenuProduct) {
            ProductPopMenu.show(jButton19, 0, 30);
            showMenuProduct = true;
        }
    }//GEN-LAST:event_jButton19MouseMoved

    private void btsaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsaveProjectActionPerformed
        try {
            common.functionCommon fc = new common.functionCommon();
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            String qry = "insert into projects (client_id,title"
                    + ",description,leader_id,status"
                    + ",starts_on,due_date,created_at,modified_at"
                    + ", created_by,location"
                    + ") "
                    + " values (?,?"
                    + ",?,?,?"
                    + ",?,?,now(),now()"
                    + ",?,?"
                    + ");";
            if (fc.isDebugging) {
                System.out.println(qry);
            }
            PreparedStatement psInsert = cn.prepareStatement(qry);
            psInsert.setInt(1, Integer.valueOf(clientMap.get(cbClientinProject.getSelectedIndex()).toString()));
            psInsert.setString(2, txProjectNAme.getText());
            psInsert.setString(3, projectDescription.getText());
            psInsert.setInt(4, Integer.valueOf(leaderMap.get(cbLeaderinProject.getSelectedIndex()).toString()));
            psInsert.setInt(5, prjStatus.getSelectedIndex());
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            java.util.Date dt = sdf.parse(txStartProject.getText());
            java.sql.Timestamp dts = new java.sql.Timestamp(dt.getTime());
            psInsert.setTimestamp(6, dts);


            dt = sdf.parse(txDuedate.getText());
            dts = new java.sql.Timestamp(dt.getTime());
            psInsert.setTimestamp(7, dts);

            psInsert.setInt(8, userID);
            psInsert.setString(9, txLocation.getText());
            psInsert.executeUpdate();
            PreparedStatement psIdentity = cn.prepareStatement("CALL IDENTITY()");
            ResultSet result = psIdentity.executeQuery();
            result.next();
            int projectID = result.getInt(1);
            psInsert.close();
            psIdentity.close();
            result.close();
            
            qry="select * from cache_products_in_project";
            Statement st = cn.createStatement();
            result = st.executeQuery(qry);
            while (result.next()) {
                qry = "insert into item_project ("
                        + "project_id,type,item_id,inventory_qty"
                        + ",created_at,modified_at"
                        + ",created_by) values ("
                        + "?,?,?,?"
                        + ",now(),now()"
                        + ",?"
                        + ")";
                psInsert = cn.prepareStatement(qry);
                psInsert.setInt(1, projectID);
                psInsert.setString(2, "a");
                psInsert.setInt(3, result.getInt("id"));
                psInsert.setInt(4, result.getInt("qty"));
                psInsert.setInt(5, userID);
                psInsert.executeUpdate();
                psInsert.close();
            }
            st.close();
            result.close();
            
            qry="select * from cache_people_in_project";
            st = cn.createStatement();
            result = st.executeQuery(qry);
            while (result.next()) {
                qry = "insert into assignments (user_id,project_id) "
                        + " values (?,?)";
                psInsert = cn.prepareStatement(qry);
                psInsert.setInt(1, result.getInt("id_people"));
                psInsert.setInt(2, projectID);
                psInsert.executeUpdate();
                psInsert.close();
            }
            st.close();
            result.close();
            
            //insert transactions
            qry = "insert into transactions (title,description,"
                    + "value,created_at,modified_at,"
                    + "created_by,project_id,account_id"
                    + ") values ("
                    + "'Material','Material project',"
                    + "?,now(),now(),"
                    + "?,?,?"
                    + ");";
            psInsert = cn.prepareStatement(qry);
            psInsert.setInt(1, Integer.valueOf(txMaterial.getText().replace(".", "")));
            psInsert.setInt(2, userID);
            psInsert.setInt(3, projectID);
            psInsert.setInt(4, 0);
            psInsert.executeUpdate();
            psInsert.close();
            
            qry = "insert into transactions (title,description,"
                    + "value,created_at,modified_at,"
                    + "created_by,project_id,account_id"
                    + ") values ("
                    + "'Peralatan','Peralatan project',"
                    + "?,now(),now(),"
                    + "?,?,?"
                    + ");";
            psInsert = cn.prepareStatement(qry);
            psInsert.setInt(1, Integer.valueOf(txPeralatan.getText().replace(".", "")));
            psInsert.setInt(2, userID);
            psInsert.setInt(3, projectID);
            psInsert.setInt(4, 1);
            psInsert.executeUpdate();
            psInsert.close();
            
            qry = "insert into transactions (title,description,"
                    + "value,created_at,modified_at,"
                    + "created_by,project_id,account_id"
                    + ") values ("
                    + "'Tenaga kerja','Tenaga kerja project',"
                    + "?,now(),now(),"
                    + "?,?,?"
                    + ");";
            psInsert = cn.prepareStatement(qry);
            psInsert.setInt(1, Integer.valueOf(txTenagaKErja.getText().replace(".", "")));
            psInsert.setInt(2, userID);
            psInsert.setInt(3, projectID);
            psInsert.setInt(4, 2);
            psInsert.executeUpdate();
            psInsert.close();
            
            qry = "insert into transactions (title,description,"
                    + "value,created_at,modified_at,"
                    + "created_by,project_id,account_id"
                    + ") values ("
                    + "'Overheat Cost','Overheat Cost project',"
                    + "?,now(),now(),"
                    + "?,?,?"
                    + ");";
            psInsert = cn.prepareStatement(qry);
            psInsert.setInt(1, Integer.valueOf(txOverHEadeCost.getText().replace(".", "")));
            psInsert.setInt(2, userID);
            psInsert.setInt(3, projectID);
            psInsert.setInt(4, 3);
            psInsert.executeUpdate();
            psInsert.close();
            
            qry = "insert into transactions (title,description,"
                    + "value,created_at,modified_at,"
                    + "created_by,project_id,account_id"
                    + ") values ("
                    + "'Management Cost','Management Cost project',"
                    + "?,now(),now(),"
                    + "?,?,?"
                    + ");";
            psInsert = cn.prepareStatement(qry);
            psInsert.setInt(1, Integer.valueOf(txManagementCost.getText().replace(".", "")));
            psInsert.setInt(2, userID);
            psInsert.setInt(3, projectID);
            psInsert.setInt(4, 4);
            psInsert.executeUpdate();
            psInsert.close();
            
            qry = "insert into transactions (title,description,"
                    + "value,created_at,modified_at,"
                    + "created_by,project_id,account_id"
                    + ") values ("
                    + "'PPN','PPN project',"
                    + "?,now(),now(),"
                    + "?,?,?"
                    + ");";
            psInsert = cn.prepareStatement(qry);
            psInsert.setInt(1, Integer.valueOf(txPPN.getText().replace(".", "")));
            psInsert.setInt(2, userID);
            psInsert.setInt(3, projectID);
            psInsert.setInt(4, 5);
            psInsert.executeUpdate();
            psInsert.close();
            //end insert transactions
            
        } catch (Exception ex) {
            System.out.println(" error in btsaveProjectActionPerformed = " + ex.getMessage());
        }
    }//GEN-LAST:event_btsaveProjectActionPerformed

    private void tbProjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbProjectMouseClicked
        if (evt.getClickCount() == 2) {
            prepareEditProjects(tbProject);
        }
    }//GEN-LAST:event_tbProjectMouseClicked

    private void tbProjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbProjectKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tbProjectKeyReleased

    private void btLastProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLastProjectActionPerformed
        txPageProject.setText(String.valueOf(lastPageProjects));
        viewProjects();
    }//GEN-LAST:event_btLastProjectActionPerformed

    private void btNextProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextProjectActionPerformed
        txPageProject.setText(String.valueOf(Integer.valueOf(txPageProject.getText()) + 1));
        viewProjects();
    }//GEN-LAST:event_btNextProjectActionPerformed

    private void txPageProjectFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPageProjectFocusLost
        if (txPageProject.getText().length() > 0) {
            common.functionCommon cf = new common.functionCommon();
            if (!cf.isNumeric(txPageProject.getText())) {
                txPageProject.setText("1");
            }
        } else {
            txPageProject.setText("1");
        }
    }//GEN-LAST:event_txPageProjectFocusLost

    private void txPageProjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPageProjectKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (txPageProject.getText().length() > 0) {
                common.functionCommon cf = new common.functionCommon();
                if (!cf.isNumeric(txPageProject.getText())) {
                    txPageProject.setText("1");
                }
            } else {
                txPageProject.setText("1");
            }
            viewProjects();
        }
    }//GEN-LAST:event_txPageProjectKeyReleased

    private void btPreviousProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousProjectActionPerformed
        txPageProject.setText(String.valueOf(Integer.valueOf(txPageProject.getText()) - 1));
        viewProjects();
    }//GEN-LAST:event_btPreviousProjectActionPerformed

    private void btFirstProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFirstProjectActionPerformed
        txPageProject.setText("1");
        viewProjects();
    }//GEN-LAST:event_btFirstProjectActionPerformed

    private void searchProjectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProjectFocusGained
        searchProject.selectAll();
    }//GEN-LAST:event_searchProjectFocusGained

    private void searchProjectFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchProjectFocusLost
        if (searchProject.getText().length() < 1) {
            searchProject.setText("Search");
        }
    }//GEN-LAST:event_searchProjectFocusLost

    private void searchProjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchProjectKeyReleased
         if (evt.getKeyCode() == evt.VK_ENTER) {
            if (Integer.valueOf(txPageProject.getText()) > 1) {
                txPageProject.setText("1");
            }
            viewProjects();
        }
    }//GEN-LAST:event_searchProjectKeyReleased

    private void txMaterialFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txMaterialFocusGained
        txMaterial.selectAll();
    }//GEN-LAST:event_txMaterialFocusGained

    private void txPeralatanFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPeralatanFocusGained
        txPeralatan.selectAll();
    }//GEN-LAST:event_txPeralatanFocusGained

    private void txTenagaKErjaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txTenagaKErjaFocusGained
        txTenagaKErja.selectAll();
    }//GEN-LAST:event_txTenagaKErjaFocusGained

    private void txOverHEadeCostFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txOverHEadeCostFocusGained
        txOverHEadeCost.selectAll();
    }//GEN-LAST:event_txOverHEadeCostFocusGained

    private void txManagementCostFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txManagementCostFocusGained
        txManagementCost.selectAll();
    }//GEN-LAST:event_txManagementCostFocusGained

    private void txPPNFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPPNFocusGained
        txPPN.selectAll();
    }//GEN-LAST:event_txPPNFocusGained

    private void txQTYProductsinProjectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txQTYProductsinProjectFocusGained
        txQTYProductsinProject.selectAll();
    }//GEN-LAST:event_txQTYProductsinProjectFocusGained

    private void ProductPopMenuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductPopMenuMouseExited
        System.out.println(" x = "+evt.getX()+" y = "+evt.getY());
        if ((showMenuProduct && (evt.getX() < 0 || evt.getX() >= 80))
                || (showMenuProduct && (evt.getY() < 0 || evt.getY() >= 30))) {
            ProductPopMenu.setVisible(false);
            showMenuProduct = false;
        }
    }//GEN-LAST:event_ProductPopMenuMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelAddProducts;
    private javax.swing.JLabel LabelAddUSer;
    private javax.swing.JPopupMenu ProductPopMenu;
    private javax.swing.JTextField acc;
    private javax.swing.JTextField accName;
    private javax.swing.JInternalFrame accountsFrame;
    private javax.swing.JTextField address;
    private javax.swing.JButton btFirst;
    private javax.swing.JButton btFirstAccounts;
    private javax.swing.JButton btFirstProduct;
    private javax.swing.JButton btFirstProject;
    private javax.swing.JButton btFirstTransactions;
    private javax.swing.JButton btLast;
    private javax.swing.JButton btLastAccounts;
    private javax.swing.JButton btLastProductLast;
    private javax.swing.JButton btLastProject;
    private javax.swing.JButton btLastTransactions;
    private javax.swing.JButton btLeftRoles;
    private javax.swing.JButton btLeftUSer;
    private javax.swing.JButton btNext;
    private javax.swing.JButton btNextAccounts;
    private javax.swing.JButton btNextProduct;
    private javax.swing.JButton btNextProject;
    private javax.swing.JButton btNextTransactions;
    private javax.swing.JButton btPrevious;
    private javax.swing.JButton btPreviousAccounts;
    private javax.swing.JButton btPreviousProduct;
    private javax.swing.JButton btPreviousProject;
    private javax.swing.JButton btPreviousTransactions;
    private javax.swing.JButton btsaveProject;
    private javax.swing.JComboBox cbClientinProject;
    private javax.swing.JComboBox cbLeaderinProject;
    private javax.swing.JComboBox cbPeopleInProject;
    private javax.swing.JComboBox cbProductsInProject;
    private javax.swing.JComboBox cbRoles;
    private javax.swing.JTextField companyName;
    private javax.swing.JLabel countAccounts;
    private javax.swing.JLabel countTransactions;
    private datechooser.beans.DateChooserDialog dateChooserDialog1;
    private datechooser.beans.DateChooserDialog dateChooserDialog2;
    private javax.swing.JComboBox filterProduct;
    private javax.swing.JComboBox filterProject;
    private javax.swing.JComboBox filterSearch;
    private javax.swing.JInternalFrame financeFrame;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lbCountPage;
    private javax.swing.JLabel lbCountProductTable;
    private javax.swing.JLabel lbCountProjectTable;
    private javax.swing.JLabel lbCountUser;
    public javax.swing.JLabel lbFirstname;
    private javax.swing.JLabel lbGrandTotal;
    private javax.swing.JLabel lbPageCountAccounts;
    private javax.swing.JLabel lbPageCountProduct;
    private javax.swing.JLabel lbPageCountProject;
    private javax.swing.JLabel lbPageCountTransactions;
    private javax.swing.JLabel lbTotal;
    private javax.swing.JPopupMenu menuPop;
    private panelLayout.panelMenu panelMenu1;
    private javax.swing.JTextField phone;
    private javax.swing.JComboBox prjStatus;
    private javax.swing.JInternalFrame productEditFrame;
    private javax.swing.JInternalFrame productsFrame;
    private panelLayout.txAreaDescription projectDescription;
    private javax.swing.JInternalFrame projectDetailFrame;
    private javax.swing.JInternalFrame projectFrame;
    private javax.swing.JScrollPane scrolltbAccounts;
    private javax.swing.JScrollPane scrolltbAccounts1;
    private javax.swing.JTextField searchProduct;
    private javax.swing.JTextField searchProduct1;
    private javax.swing.JTextField searchProduct2;
    private javax.swing.JTextField searchProject;
    private javax.swing.JTable tbAccounts;
    private javax.swing.JTable tbPeopleinProject;
    private javax.swing.JTable tbProduct;
    private javax.swing.JTable tbProductInProjects;
    private javax.swing.JTable tbProject;
    private javax.swing.JTable tbTransactions;
    private javax.swing.JTable tbUser;
    private javax.swing.JInternalFrame transactionsFrame;
    private javax.swing.JTextPane txDescription;
    private javax.swing.JFormattedTextField txDuedate;
    private javax.swing.JTextField txEmail;
    private javax.swing.JTextField txFirstName;
    private javax.swing.JTextField txInUserName;
    private javax.swing.JTextField txItemName;
    private javax.swing.JTextField txLAstNAme;
    private javax.swing.JTextField txLocation;
    private javax.swing.JTextField txManagementCost;
    private javax.swing.JTextField txMaterial;
    private javax.swing.JTextField txOverHEadeCost;
    private javax.swing.JPasswordField txPAss1;
    private javax.swing.JPasswordField txPAss2;
    private javax.swing.JTextField txPPN;
    private javax.swing.JTextField txPage;
    private javax.swing.JTextField txPageAccounts;
    private javax.swing.JTextField txPageProduct;
    private javax.swing.JTextField txPageProject;
    private javax.swing.JTextField txPageTransactions;
    private javax.swing.JTextField txPeralatan;
    private javax.swing.JTextField txPrice;
    private javax.swing.JTextField txProductsID;
    private javax.swing.JTextField txProjectNAme;
    private javax.swing.JTextField txProjectid;
    private javax.swing.JTextField txQTY;
    private javax.swing.JTextField txQTYProductsinProject;
    private javax.swing.JTextField txSKU;
    private javax.swing.JTextField txSearch;
    private javax.swing.JFormattedTextField txStartProject;
    private javax.swing.JTextField txTenagaKErja;
    private javax.swing.JTextField txuserID;
    private javax.swing.JInternalFrame userEditFrame;
    private javax.swing.JInternalFrame userFrame;
    // End of variables declaration//GEN-END:variables
    SimpleDateFormat sdf =
            new SimpleDateFormat("dd/MM/yyyy");
    //table Component
    javax.swing.table.TableColumn tc = new javax.swing.table.TableColumn();
    javax.swing.table.TableModel tmTabelUser;
    java.util.Vector vectorUser = new java.util.Vector();
    javax.swing.table.TableModel tmTabelProducts;
    java.util.Vector vectorProducts = new java.util.Vector();
    javax.swing.table.TableModel tmTableProductsInProject;
    java.util.Vector vectorProductsInProject = new java.util.Vector();
    javax.swing.table.TableModel tmTabelPeopleInProject;
    java.util.Vector vectorPeopleInProject = new java.util.Vector();
    javax.swing.table.TableModel tmTabelAccounts;
    java.util.Vector vectorProject = new java.util.Vector();
    javax.swing.table.TableModel tmTabelProject;
    java.util.Vector vectorAccounts = new java.util.Vector();
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    //end  Component
    int lastPageUSer = 0;
    int lastPageProducts = 0;
    int lastPageAccounts = 0;
    int lastPageProjects = 0;
    boolean showMenuUser = false, showMenuProduct;
    Map leaderMap = new LinkedHashMap();
    Map clientMap = new LinkedHashMap();
    Map productMap = new LinkedHashMap();
    Map peopleInProjectMap = new LinkedHashMap();
    
    
    public void viewProjects() {
        common.functionCommon fc = new common.functionCommon();
        int limit = 15;
        String qry = "", orderBy = "", Condition = "";
        if (searchProject.getText().length() > 0) {
            if (filterProject.getSelectedItem().toString().equalsIgnoreCase("TITLE")) {
                Condition = " where a.title like '%" + searchProject.getText() + "%'";
            } else if (filterProject.getSelectedItem().toString().equalsIgnoreCase("LEADER")) {
                Condition = " where b.first_name like '%" + searchProject.getText() + "%' "
                        + " or b.last_name like '%" + searchProject.getText() + "%'  ";
            } else if (filterProject.getSelectedItem().toString().equalsIgnoreCase("CLIENT")) {
                Condition = " where c.first_name like '%" + searchProject.getText() + "%' "
                        + " or c.last_name like '%" + searchProject.getText() + "%'  ";
            } else if (filterProject.getSelectedItem().toString().equalsIgnoreCase("START ON")) {
                Condition = " where lower(to_char(a.starts_on,'DD MON YYYY'))  =lower('" + searchProject.getText() + "') ";
            } else if (filterProject.getSelectedItem().toString().equalsIgnoreCase("STATUS")) {
                Condition = " where a.status  ='" + fc.getStatusProjectIndex(searchProject.getText()) + "' ";
            }
            
        }


        int positionNow = (Integer.valueOf(txPageProject.getText()) - 1);
        
        if (positionNow == 0) {
            btPreviousProject.setEnabled(false);
            btFirstProject.setEnabled(false);
        } else {
            btPreviousProject.setEnabled(true);
            btFirstProject.setEnabled(true);
        }
        orderBy = " order by name asc";
        int total = 0;

        try {
            qry = "select count(*) as totalCount from projects a "
                    + " left join user b on a.leader_id = b.id "
                    + " left join user c on a.client_id =c. id " + Condition;
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                total = rs.getInt("totalCount");
                lbCountProjectTable.setText(rs.getString("totalCount") + " Projects");
                if (total > 0) {

                    lastPageProjects = rs.getInt("totalCount") / limit;
                    if ((rs.getInt("totalCount") % limit) > 0) {
                        lastPageProjects++;
                    }

                    if ((lastPageProjects - 1) <= positionNow) {
                        btNextProject.setEnabled(false);
                        btLastProject.setEnabled(false);
                        txPageProject.setText(String.valueOf(lastPageProjects));
                        positionNow = lastPageProjects - 1;
                    } else {
                        if (positionNow < 0) {
                            positionNow = 0;
                            txPageProject.setText("1");
                            btPreviousProject.setEnabled(false);
                            btFirstProject.setEnabled(false);
                        }
                        if (lastPageProjects > 1) {
                            btNextProject.setEnabled(true);
                            btLastProject.setEnabled(true);
                        } else {
                            btNextProject.setEnabled(false);
                            btLastProject.setEnabled(false);
                        }
                    }
                } else {
                    btNextProject.setEnabled(false);
                    btLastProject.setEnabled(false);
                    btPreviousProject.setEnabled(false);
                    btFirstProject.setEnabled(false);
                    positionNow = 0;
                    txPageProject.setText("0");
                }
            }
            int positionNOW2 = positionNow * limit;
            String limiTation = " offset " + positionNOW2 + " limit " + limit;
            qry = "select a.id,b.first_name as leaderf,b.last_name as leaderl "
                    + ",c.first_name as clientf,c.last_name as clientl,"
                    + " a.status,a.title,a.description "
                    + ","+ fc.viewDatefromSQL("a.starts_on", "starts_on")
                    + " from projects a "
                    + " left join user b on a.leader_id = b.id "
                    + " left join user c on a.client_id =c. id  " + Condition
                    + " " + limiTation;
            if (fc.isDebugging) {
                System.out.println(" qry = " + qry);
            }
            rs = st.executeQuery(qry);
            java.util.Vector rowData = null;
            vectorProject = new java.util.Vector();

            while (rs.next()) {
                rowData = new java.util.Vector();

                rowData.addElement(rs.getInt("id"));
                rowData.addElement("<html><strong>" + rs.getString("title") + "</strong><br>" + rs.getString("description") + "</html>");
                rowData.addElement( rs.getString("leaderf") +" "+rs.getString("leaderl"));
                rowData.addElement(rs.getString("clientf") +" "+rs.getString("clientl"));
                rowData.addElement(rs.getString("starts_on"));
                rowData.addElement( fc.getStatusProject(rs.getInt("status")));
                rowData.addElement("");
                vectorProject.addElement(rowData);

            }
            tbProject.tableChanged(new javax.swing.event.TableModelEvent(tmTabelProject));
            lbPageCountProject.setText(" of " + lastPageProjects);
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("Error in viewProjects " + ex.getMessage());
            }
        }
    }

    public void viewProducts() {
        int limit = 15;
        String qry = "", orderBy = "", Condition = "";
        if (searchProduct.getText().length() > 0) {
            if (filterProduct.getSelectedItem().toString().equalsIgnoreCase("Name")) {
                Condition = " where a.name like '%" + searchProduct.getText() + "%'";
            } else if (filterProduct.getSelectedItem().toString().equalsIgnoreCase("SKU")) {
                Condition = " where a.sku like '%" + searchProduct.getText() + "%'";
            } else if (filterProduct.getSelectedItem().toString().equalsIgnoreCase("Price")) {
                Condition = " where a.price = " + searchProduct.getText();
            } else if (filterProduct.getSelectedItem().toString().equalsIgnoreCase("Category")) {
                Condition = " where b.name = '" + searchProduct.getText() + "'";
            }
        }



        int positionNow = (Integer.valueOf(txPageProduct.getText()) - 1);
        common.functionCommon fc = new common.functionCommon();
        if (positionNow == 0) {
            btPreviousProduct.setEnabled(false);
            btFirstProduct.setEnabled(false);
        } else {
            btPreviousProduct.setEnabled(true);
            btFirstProduct.setEnabled(true);
        }
        orderBy = " order by name asc";
        int total = 0;

        try {
            qry = "select count(*) as totalCount from inventories a " + Condition;
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                total = rs.getInt("totalCount");
                lbCountProductTable.setText(rs.getString("totalCount") + " Products");
                if (total > 0) {

                    lastPageProducts = rs.getInt("totalCount") / limit;
                    if ((rs.getInt("totalCount") % limit) > 0) {
                        lastPageProducts++;
                    }

                    if ((lastPageProducts - 1) <= positionNow) {
                        btNextProduct.setEnabled(false);
                        btLastProductLast.setEnabled(false);
                        txPageProduct.setText(String.valueOf(lastPageProducts));
                        positionNow = lastPageProducts - 1;
                    } else {
                        if (positionNow < 0) {
                            positionNow = 0;
                            txPageProduct.setText("1");
                            btPreviousProduct.setEnabled(false);
                            btFirstProduct.setEnabled(false);
                        }
                        if (lastPageProducts > 1) {
                            btNextProduct.setEnabled(true);
                            btLastProductLast.setEnabled(true);
                        } else {
                            btNextProduct.setEnabled(false);
                            btLastProductLast.setEnabled(false);
                        }
                    }
                } else {
                    btNextProduct.setEnabled(false);
                    btLastProductLast.setEnabled(false);
                    btPreviousProduct.setEnabled(false);
                    btFirstProduct.setEnabled(false);
                    positionNow = 0;
                    txPageProduct.setText("0");
                }
            }
            int positionNOW2 = positionNow * limit;
            String limiTation = " offset " + positionNOW2 + " limit " + limit;
            qry = "select a.id,a.name,a.description,a.sku,a.quantity,"
                    + fc.viewDatefromSQL("a.modified_at", "modified_at")
                    + " from items a " + Condition
                    + " " + limiTation;
            if (fc.isDebugging) {
                System.out.println(" qry = " + qry);
            }
            rs = st.executeQuery(qry);
            java.util.Vector rowData = null;
            vectorProducts = new java.util.Vector();

            while (rs.next()) {
                rowData = new java.util.Vector();

                rowData.addElement(rs.getInt("id"));
                rowData.addElement("<html><strong>" + rs.getString("name") + "</strong><br>" + rs.getString("description") + "</html>");
                rowData.addElement(rs.getString("sku"));
                rowData.addElement("<html><strong><font size=\"5\">" + fc.digitNumber(rs.getString("quantity")) + "</font></strong></html>");
                rowData.addElement(rs.getString("modified_at"));
                rowData.addElement("");
                vectorProducts.addElement(rowData);

            }
            tbProduct.tableChanged(new javax.swing.event.TableModelEvent(tmTabelProducts));
            lbPageCountProduct.setText(" of " + lastPageProducts);
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("Error in viewProducts " + ex.getMessage());
            }
        }
    }

    public void viewAccounts() {
        int limit = 12;
        String qry = "", orderBy = "", Condition = "";


        int positionNow = (Integer.valueOf(txPageAccounts.getText()) - 1);
        common.functionCommon fc = new common.functionCommon();
        if (positionNow == 0) {
            btPreviousAccounts.setEnabled(false);
            btFirstAccounts.setEnabled(false);
        } else {
            btPreviousAccounts.setEnabled(true);
            btFirstAccounts.setEnabled(true);
        }
        orderBy = " order by unique_id asc";
        int total = 0;

        try {
            qry = "select count(*) as totalCount from accounts";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                total = rs.getInt("totalCount");
                countAccounts.setText(rs.getString("totalCount") + " Accounts");
                if (total > 0) {

                    lastPageAccounts = rs.getInt("totalCount") / limit;
                    if ((rs.getInt("totalCount") % limit) > 0) {
                        lastPageAccounts++;
                    }

                    if ((lastPageAccounts - 1) <= positionNow) {
                        btNextAccounts.setEnabled(false);
                        btLastAccounts.setEnabled(false);
                        txPageAccounts.setText(String.valueOf(lastPageAccounts));
                        positionNow = lastPageAccounts - 1;
                    } else {
                        if (positionNow < 0) {
                            positionNow = 0;
                            txPageAccounts.setText("1");
                            btPreviousAccounts.setEnabled(false);
                            btFirstAccounts.setEnabled(false);
                        }
                        if (lastPageAccounts > 1) {
                            btNextAccounts.setEnabled(true);
                            btLastAccounts.setEnabled(true);
                        } else {
                            btNextAccounts.setEnabled(false);
                            btLastAccounts.setEnabled(false);
                        }
                    }
                } else {
                    btNextAccounts.setEnabled(false);
                    btLastAccounts.setEnabled(false);
                    btPreviousAccounts.setEnabled(false);
                    btFirstAccounts.setEnabled(false);
                    positionNow = 0;
                    txPageAccounts.setText("0");
                }
            }

            int positionNOW2 = positionNow * limit;
            String limiTation = " offset " + positionNOW2 + " limit " + limit;
            qry = "select id,unique_id,name from accounts" + orderBy + limiTation;
            if (fc.isDebugging) {
                System.out.println(" qry = " + qry);
            }
            rs = st.executeQuery(qry);
            java.util.Vector rowData = null;
            vectorAccounts = new java.util.Vector();

            while (rs.next()) {
                rowData = new java.util.Vector();

                rowData.addElement(rs.getInt("id"));
                rowData.addElement(rs.getString("unique_id"));
                rowData.addElement(rs.getString("name"));
                rowData.addElement("P/L");
                rowData.addElement("P/L");
                vectorAccounts.addElement(rowData);

            }
            tbAccounts.tableChanged(new javax.swing.event.TableModelEvent(tmTabelAccounts));
            lbPageCountAccounts.setText(" of " + lastPageAccounts);
            st.close();
            cn.close();

        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("Error in viewAccounts " + ex.getMessage());
            }
        }
    }

    public void viewUser() {
        int limit = 15;
        common.functionCommon fc = new common.functionCommon();
        String qry = "", orderBy = "", Condition = "";

        Condition = " where a.id<>" + userID + " ";
        if (role_id != 0) {
            Condition += " and a.roles_id<>0 ";
        }
        if (role_id != 1 && role_id != 0) {
            Condition += " and a.roles_id<>1 ";
        }

        if (txSearch.getText().length() > 0) {
            if (filterSearch.getSelectedItem().toString().equalsIgnoreCase("Name")) {
                StringTokenizer st = new StringTokenizer(txSearch.getText(), " ");
                int i = 0;
                String conditionFirstName = "", conditionLastName = "";
                String tokenGET = "";
                while (st.hasMoreTokens()) {
                    tokenGET = st.nextToken();
                    if (i == 0) {
                        conditionFirstName += " a.first_name like '%" + tokenGET + "%' ";
                        conditionLastName += " a.last_name like '%" + tokenGET + "%' ";
                    } else {
                        conditionFirstName += " or a.first_name like '%" + tokenGET + "%' ";
                        conditionLastName += " or a.last_name like '%" + tokenGET + "%' ";
                    }
                    i++;
                }
                Condition += " and " + conditionFirstName + " or " + conditionLastName + " ";
            } else if (filterSearch.getSelectedItem().toString().equalsIgnoreCase("Role")) {
                Condition += " and b.name = '" + txSearch.getText() + "' ";
            } else if (filterSearch.getSelectedItem().toString().equalsIgnoreCase("Email")) {
                Condition += " and a.email like '%" + txSearch.getText() + "%' ";
            } else if (filterSearch.getSelectedItem().toString().equalsIgnoreCase("Company")) {
                Condition += " and a.company_name like '%" + txSearch.getText() + "%' ";
            }
        }




        int positionNow = (Integer.valueOf(txPage.getText()) - 1);


        if (positionNow == 0) {
            btPrevious.setEnabled(false);
            btFirst.setEnabled(false);
        } else {
            btPrevious.setEnabled(true);
            btFirst.setEnabled(true);
        }

        orderBy = " order by name asc";
        int total = 0;


        try {
            qry = "select count(*) as totalCount from user a "
                    + " left join roles b on a.roles_id=b.id " + Condition;
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            if (rs.next()) {
                total = rs.getInt("totalCount");
                lbCountUser.setText(rs.getString("totalCount") + " Users");
                if (total > 0) {

                    lastPageUSer = rs.getInt("totalCount") / limit;
                    if ((rs.getInt("totalCount") % limit) > 0) {
                        lastPageUSer++;
                    }

                    if ((lastPageUSer - 1) <= positionNow) {
                        btNext.setEnabled(false);
                        btLast.setEnabled(false);
                        txPage.setText(String.valueOf(lastPageUSer));
                        positionNow = lastPageUSer - 1;
                    } else {
                        if (positionNow < 0) {
                            positionNow = 0;
                            txPage.setText("1");
                            btPrevious.setEnabled(false);
                            btFirst.setEnabled(false);
                        }
                        if (lastPageUSer > 1) {
                            btNext.setEnabled(true);
                            btLast.setEnabled(true);
                        } else {
                            btNext.setEnabled(false);
                            btLast.setEnabled(false);
                        }
                    }
                } else {
                    btNext.setEnabled(false);
                    btLast.setEnabled(false);
                    btPrevious.setEnabled(false);
                    btFirst.setEnabled(false);
                    positionNow = 0;
                    txPage.setText("0");
                }
            }
            int positionNOW2 = positionNow * limit;
            String limiTation = " offset " + positionNOW2 + " limit " + limit;
            qry = "select a.id,a.first_name,a.last_name,b.name as roles,a.email,a.company_name from user a "
                    + " left join roles b on a.roles_id=b.id" + Condition + limiTation;
            if (fc.isDebugging) {
                System.out.println(" qry = " + qry);
            }
            rs = st.executeQuery(qry);
            java.util.Vector rowData = null;
            vectorUser = new java.util.Vector();
            String nameUser = "";
            while (rs.next()) {
                rowData = new java.util.Vector();
                nameUser = "";
                if (rs.getString("first_name") != null) {
                    if (rs.getString("first_name").length() > 0) {
                        nameUser = rs.getString("first_name");
                    }
                }
                if (rs.getString("last_name") != null) {
                    if (rs.getString("last_name").length() > 0) {
                        if (nameUser.length() > 0) {
                            nameUser += " ";
                        }
                        nameUser += rs.getString("last_name");
                    }
                }

                rowData.addElement(rs.getInt("id"));
                rowData.addElement(nameUser);
                rowData.addElement(rs.getString("roles"));
                rowData.addElement(rs.getString("email"));
                rowData.addElement(rs.getString("company_name"));
                rowData.addElement("");
                vectorUser.addElement(rowData);

            }
            tbUser.tableChanged(new javax.swing.event.TableModelEvent(tmTabelUser));
            lbCountPage.setText(" of " + lastPageUSer);
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("Error in viewUser " + ex.getMessage());
            }
        }
    }
    
    void getDataClientAndLEader() {
        // get Data Leader getData Leader and client
        common.functionCommon fc = new common.functionCommon();
        try {
            cbLeaderinProject.removeAllItems();
            cbClientinProject.removeAllItems();
            String qry = "select id,first_name,last_name from user "
                    + "where first_name is not null and first_name<>'' "
                    + "and last_name is not null and last_name<>'' "
                    + "order by first_name";
            Connection cn = DriverManager.getConnection(fc.connection, fc.userName, fc.passWord);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(qry);
            leaderMap = new LinkedHashMap();
            clientMap = new LinkedHashMap();
            productMap = new LinkedHashMap();
            peopleInProjectMap = new LinkedHashMap();
            cbLeaderinProject.addItem(addJcomboBoxItemWithDuplicate("Select Leader", cbLeaderinProject));
            leaderMap.put(cbLeaderinProject.getItemCount() - 1, "");
            cbLeaderinProject.setSelectedIndex(0);
            cbClientinProject.addItem(addJcomboBoxItemWithDuplicate("Select Client", cbClientinProject));
            clientMap.put(cbClientinProject.getItemCount() - 1, "");
            cbClientinProject.setSelectedIndex(0);
            while (rs.next()) {
                cbLeaderinProject.addItem(addJcomboBoxItemWithDuplicate(
                        rs.getString("first_name") + " "
                        + rs.getString("last_name"), cbLeaderinProject));
                leaderMap.put(cbLeaderinProject.getItemCount() - 1, rs.getInt("id"));

                cbClientinProject.addItem(addJcomboBoxItemWithDuplicate(
                        rs.getString("first_name") + " "
                        + rs.getString("last_name"), cbClientinProject));
                clientMap.put(cbClientinProject.getItemCount() - 1, rs.getInt("id"));
            }
            qry = "delete from cache_products_in_project where user_id=" + String.valueOf(userID);
            st.executeUpdate(qry);
            qry = "delete from cache_people_in_project where id_user=" + String.valueOf(userID);
            st.executeUpdate(qry);
            st.close();
            cn.close();
        } catch (Exception ex) {
            if (fc.isDebugging) {
                System.out.println("error in viewProjectDetailEmpty " + ex.getMessage());
            }
        }
        //end getData Leader and client
    }

    void viewProjectDetailEmpty() {
        txProjectid.setText("");
        txProjectNAme.setText("PROJECT NAME");
        projectDescription.setText("Description");
        Date dt = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        txStartProject.setText(sdf.format(dt));
        txDuedate.setText(sdf.format(dt));
        txLocation.setText("");
        cbProductsInProject.removeAllItems();
        txMaterial.setText("0");
        txPeralatan.setText("0");
        txTenagaKErja.setText("0");
        txOverHEadeCost.setText("0");
        txManagementCost.setText("0");
        lbTotal.setText("0");
        txPPN.setText("0");
        lbGrandTotal.setText("0");

        getDataClientAndLEader();
        
        refreshTableProductInProject();
        refreshcbProductsInProject();
        refreshTablePeopleINProject();
        refreshcbPeopleInProject();
    }

    public String addJcomboBoxItemWithDuplicate(String text, JComboBox jcb) {
        String getBack = text;
        boolean exist = true;
        DefaultComboBoxModel model = (DefaultComboBoxModel) jcb.getModel();
        while (exist) {
            if (model.getIndexOf(getBack) == -1) {
                exist = false;
            } else {
                getBack += " ";
            }
        }
        return getBack;
    }

    void closeAllInternalFrame() {
        btLeftUSer.setVisible(false);
        btLeftRoles.setVisible(false);
        userFrame.setVisible(false);
        userEditFrame.setVisible(false);
        projectFrame.setVisible(false);
        productsFrame.setVisible(false);
        productEditFrame.setVisible(false);
        projectDetailFrame.setVisible(false);
        financeFrame.setVisible(false);
        accountsFrame.setVisible(false);
        transactionsFrame.setVisible(false);
    }

    void POPUpMenuUsuallycommand() {
        showMenuUser = false;
        showMenuProduct = false;
    }

    class ButtonsPanel extends JPanel {

        public final java.util.List<JButton> buttons = Arrays.asList(new JButton(""), new JButton(""));

        public ButtonsPanel() {
            super();
            setOpaque(true);
            for (JButton b : buttons) {
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                b.setPreferredSize(new Dimension(22, 22));
                add(b);
            }
            buttons.get(0).setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editIcon.png")));
            buttons.get(1).setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delIcon.png")));
        }
    }

    class ButtonsPanelAccounts extends JPanel {

        public final java.util.List<JButton> buttons = Arrays.asList(new JButton(""));

        public ButtonsPanelAccounts() {
            super();
            setOpaque(true);
            for (JButton b : buttons) {
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                b.setPreferredSize(new Dimension(22, 22));
                add(b);
            }
            buttons.get(0).setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delIcon.png")));
        }
    }

    class BTXDelete extends JPanel {

        public final java.util.List<JButton> buttons = Arrays.asList(new JButton(""));

        public BTXDelete() {
            super();
            setOpaque(true);
            for (JButton b : buttons) {
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                b.setPreferredSize(new Dimension(22, 22));
                add(b);
            }
            buttons.get(0).setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconX.png")));
        }
    }

    class labelPeople extends JPanel {

        public JLabel lbPeopleName = new JLabel();

        public labelPeople() {
            super();
            setLayout(new FlowLayout(FlowLayout.LEFT));
            JLabel lbIcon = new JLabel();
            lbIcon.setIcon(new ImageIcon(getClass().getResource("/img/userIcon.png")));
            add(lbIcon);
            add(lbPeopleName);
        }
    }

    class lbRenderPeople extends labelPeople implements TableCellRenderer {

        public lbRenderPeople() {
            super();
            setName("Table.cellRenderPeople");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            this.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            lbPeopleName.setText(table.getValueAt(row, column).toString());
            return this;
        }
    }

    class ButtonsRendererAccounts extends ButtonsPanelAccounts implements TableCellRenderer {

        public ButtonsRendererAccounts() {
            super();
            setName("Table.cellRendererAccounts");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            this.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            return this;
        }
    }

    class ButtonsRendererbtXDelete extends BTXDelete implements TableCellRenderer {

        public ButtonsRendererbtXDelete() {
            super();
            setName("Table.cellRendererAccounts");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            this.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            return this;
        }
    }

    class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer {

        public ButtonsRenderer() {
            super();
            setName("Table.cellRenderer");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            this.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            return this;
        }
    }

    class ButtonsEditor extends ButtonsPanel implements TableCellEditor {

        public ButtonsEditor(final JTable table) {
            super();

            MouseListener ml = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    ButtonModel m = ((JButton) e.getSource()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }
                    table.setRowSelectionInterval(table.getEditingRow(), table.getEditingRow());
                }
            };
            buttons.get(0).addMouseListener(ml);
            buttons.get(1).addMouseListener(ml);

            buttons.get(0).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    prepareEditUSer(table.getValueAt(table.getSelectedRow(), 0).toString());
                }
            });

            buttons.get(1).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    dropDataUSer(table);
                }
            });

        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
        //Copid from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        transient protected ChangeEvent changeEvent = null;

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }

        @Override
        public boolean stopCellEditing() {
            return true;
        }

        @Override
        public void cancelCellEditing() {
        }

        @Override
        public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }

        @Override
        public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }

        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
    }

    class ButtonsEditorProducts extends ButtonsPanel implements TableCellEditor {

        public ButtonsEditorProducts(final JTable table) {
            super();
            MouseListener ml = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    ButtonModel m = ((JButton) e.getSource()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }

                    table.setRowSelectionInterval(table.getEditingRow(), table.getEditingRow());
                }
            };
            buttons.get(0).addMouseListener(ml);
            buttons.get(1).addMouseListener(ml);

            buttons.get(0).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    prepareEditProduct(table);
                }
            });

            buttons.get(1).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    dropDataProduct(table);
                }
            });

        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
        //Copid from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        transient protected ChangeEvent changeEvent = null;

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }

        @Override
        public boolean stopCellEditing() {
            return true;
        }

        @Override
        public void cancelCellEditing() {
        }

        @Override
        public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }

        @Override
        public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }

        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
    }
    
    class ButtonsEditorProjects extends ButtonsPanel implements TableCellEditor {

        public ButtonsEditorProjects(final JTable table) {
            super();
            MouseListener ml = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    ButtonModel m = ((JButton) e.getSource()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }

                    table.setRowSelectionInterval(table.getEditingRow(), table.getEditingRow());
                }
            };
            buttons.get(0).addMouseListener(ml);
            buttons.get(1).addMouseListener(ml);

            buttons.get(0).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    prepareEditProjects(table);
                }
            });

            buttons.get(1).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    dropDataProduct(table);
                }
            });

        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
        //Copid from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        transient protected ChangeEvent changeEvent = null;

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }

        @Override
        public boolean stopCellEditing() {
            return true;
        }

        @Override
        public void cancelCellEditing() {
        }

        @Override
        public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }

        @Override
        public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }

        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
    }

    class ButtonsEditorAccounts extends ButtonsPanelAccounts implements TableCellEditor {

        public ButtonsEditorAccounts(final JTable table) {
            super();
            MouseListener ml = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    ButtonModel m = ((JButton) e.getSource()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }

                    table.setRowSelectionInterval(table.getEditingRow(), table.getEditingRow());
                }
            };
            buttons.get(0).addMouseListener(ml);

            buttons.get(0).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    deleteAccounts(table);
                }
            });


        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
        //Copid from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        transient protected ChangeEvent changeEvent = null;

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }

        @Override
        public boolean stopCellEditing() {
            return true;
        }

        @Override
        public void cancelCellEditing() {
        }

        @Override
        public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }

        @Override
        public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }

        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
    }

    class ButtonsEditorXDeletePeopleInProject extends ButtonsRendererbtXDelete implements TableCellEditor {

        public ButtonsEditorXDeletePeopleInProject(final JTable table) {
            super();
            MouseListener ml = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    ButtonModel m = ((JButton) e.getSource()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }

                    table.setRowSelectionInterval(table.getEditingRow(), table.getEditingRow());
                }
            };
            buttons.get(0).addMouseListener(ml);

            buttons.get(0).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    deletePeopleInProject(table);
                }
            });


        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
        //Copid from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        transient protected ChangeEvent changeEvent = null;

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }

        @Override
        public boolean stopCellEditing() {
            return true;
        }

        @Override
        public void cancelCellEditing() {
        }

        @Override
        public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }

        @Override
        public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }

        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
    }

    class ButtonsEditorXDelete extends ButtonsRendererbtXDelete implements TableCellEditor {

        public ButtonsEditorXDelete(final JTable table) {
            super();
            MouseListener ml = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    ButtonModel m = ((JButton) e.getSource()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }

                    table.setRowSelectionInterval(table.getEditingRow(), table.getEditingRow());
                }
            };
            buttons.get(0).addMouseListener(ml);

            buttons.get(0).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    deleteProductInProject(table);
                }
            });


        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
        //Copid from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        transient protected ChangeEvent changeEvent = null;

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }

        @Override
        public boolean stopCellEditing() {
            return true;
        }

        @Override
        public void cancelCellEditing() {
        }

        @Override
        public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }

        @Override
        public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }

        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
    }
}
